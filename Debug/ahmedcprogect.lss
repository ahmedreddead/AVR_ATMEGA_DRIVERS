
ahmedcprogect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000177a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000177a  0000180e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008000a0  008000a0  0000184e  2**0
                  ALLOC
  3 .stab         000028e0  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000134e  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000547e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005490  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000054cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000059b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00005e6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_1>
       8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_2>
       c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	55 03       	mulsu	r21, r21
      56:	5c 03       	fmul	r21, r20
      58:	63 03       	mulsu	r22, r19
      5a:	6a 03       	fmul	r22, r18
      5c:	71 03       	mulsu	r23, r17
      5e:	78 03       	fmul	r23, r16
      60:	7f 03       	fmul	r23, r23
      62:	86 03       	fmuls	r16, r22
      64:	8d 03       	fmulsu	r16, r21
      66:	94 03       	fmuls	r17, r20

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3a       	cpi	r26, 0xA0	; 160
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	20 e0       	ldi	r18, 0x00	; 0
      8c:	a0 ea       	ldi	r26, 0xA0	; 160
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3c       	cpi	r26, 0xC8	; 200
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <main>
      9e:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init_void_Adc>:
#include "EXTI.h"
#include "timer0.h"
#include "Adc.h"

void Init_void_Adc()
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	//ADMUX
	//• Bit 7:6 – REFS1:0: Reference Selection Bits
	//1 1 Internal 2.56V Voltage Reference with external capacitor at AREF pin
	SET_BIT(ADMUX,REFS1);   SET_BIT(ADMUX,REFS0);
      ae:	87 e2       	ldi	r24, 0x27	; 39
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	27 e2       	ldi	r18, 0x27	; 39
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 68       	ori	r18, 0x80	; 128
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
      c0:	87 e2       	ldi	r24, 0x27	; 39
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	27 e2       	ldi	r18, 0x27	; 39
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	20 64       	ori	r18, 0x40	; 64
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	//• Bits 4:0 – MUX4:0: Analog Channel and Gain Selection Bits
	//00000 ADC0
    CLEAR_BIT(ADMUX,MUX0);CLEAR_BIT(ADMUX,MUX1);CLEAR_BIT(ADMUX,MUX2);CLEAR_BIT(ADMUX,MUX3);CLEAR_BIT(ADMUX,MUX4);
      d2:	87 e2       	ldi	r24, 0x27	; 39
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	27 e2       	ldi	r18, 0x27	; 39
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	2e 7f       	andi	r18, 0xFE	; 254
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
      e4:	87 e2       	ldi	r24, 0x27	; 39
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	27 e2       	ldi	r18, 0x27	; 39
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	2d 7f       	andi	r18, 0xFD	; 253
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
      f6:	87 e2       	ldi	r24, 0x27	; 39
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	27 e2       	ldi	r18, 0x27	; 39
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	2b 7f       	andi	r18, 0xFB	; 251
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
     108:	87 e2       	ldi	r24, 0x27	; 39
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	27 e2       	ldi	r18, 0x27	; 39
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	27 7f       	andi	r18, 0xF7	; 247
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
     11a:	87 e2       	ldi	r24, 0x27	; 39
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	27 e2       	ldi	r18, 0x27	; 39
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	2f 7e       	andi	r18, 0xEF	; 239
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18

    SET_BIT(ADCSRA,ADPS2);
     12c:	86 e2       	ldi	r24, 0x26	; 38
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	26 e2       	ldi	r18, 0x26	; 38
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	24 60       	ori	r18, 0x04	; 4
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
    SET_BIT(ADCSRA,ADPS1);
     13e:	86 e2       	ldi	r24, 0x26	; 38
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	26 e2       	ldi	r18, 0x26	; 38
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	22 60       	ori	r18, 0x02	; 2
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
    SET_BIT(ADCSRA,ADPS0);
     150:	86 e2       	ldi	r24, 0x26	; 38
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	26 e2       	ldi	r18, 0x26	; 38
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	20 81       	ld	r18, Z
     15c:	21 60       	ori	r18, 0x01	; 1
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18

}
     162:	00 00       	nop
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <Start_void_Adc_1_converstion>:
void Start_void_Adc_1_converstion()
{
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
//ADCSRA
	//adc enable
	SET_BIT(ADCSRA,ADEN);
     172:	86 e2       	ldi	r24, 0x26	; 38
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	26 e2       	ldi	r18, 0x26	; 38
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	f9 01       	movw	r30, r18
     17c:	20 81       	ld	r18, Z
     17e:	20 68       	ori	r18, 0x80	; 128
     180:	fc 01       	movw	r30, r24
     182:	20 83       	st	Z, r18
	//adc one con
	SET_BIT(ADCSRA,ADSC);
     184:	86 e2       	ldi	r24, 0x26	; 38
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	26 e2       	ldi	r18, 0x26	; 38
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	20 64       	ori	r18, 0x40	; 64
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18

}
     196:	00 00       	nop
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <Start_void_Adc_Auto_converstion>:
void Start_void_Adc_Auto_converstion()
{
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
	//ADCSRA
		//adc enable
		SET_BIT(ADCSRA,ADEN);
     1a6:	86 e2       	ldi	r24, 0x26	; 38
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	26 e2       	ldi	r18, 0x26	; 38
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	f9 01       	movw	r30, r18
     1b0:	20 81       	ld	r18, Z
     1b2:	20 68       	ori	r18, 0x80	; 128
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
		//adc auto con
		SET_BIT(ADCSRA,ADATE);
     1b8:	86 e2       	ldi	r24, 0x26	; 38
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	26 e2       	ldi	r18, 0x26	; 38
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	f9 01       	movw	r30, r18
     1c2:	20 81       	ld	r18, Z
     1c4:	20 62       	ori	r18, 0x20	; 32
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18

}
     1ca:	00 00       	nop
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <GetReading_voidAdc16bit>:
void GetReading_voidAdc16bit(u16 *u16Reading)
{
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <GetReading_voidAdc16bit+0x6>
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	9a 83       	std	Y+2, r25	; 0x02
     1de:	89 83       	std	Y+1, r24	; 0x01
	while((ADCSRA & (1<<ADIF))== 0 );
     1e0:	00 00       	nop
     1e2:	86 e2       	ldi	r24, 0x26	; 38
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	88 2f       	mov	r24, r24
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	80 71       	andi	r24, 0x10	; 16
     1f0:	99 27       	eor	r25, r25
     1f2:	89 2b       	or	r24, r25
     1f4:	b1 f3       	breq	.-20     	; 0x1e2 <GetReading_voidAdc16bit+0x10>
	*u16Reading=ADCL;
     1f6:	84 e2       	ldi	r24, 0x24	; 36
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	80 81       	ld	r24, Z
     1fe:	28 2f       	mov	r18, r24
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	fc 01       	movw	r30, r24
     208:	31 83       	std	Z+1, r19	; 0x01
     20a:	20 83       	st	Z, r18
	*u16Reading |=(ADCH <<8);
     20c:	85 e2       	ldi	r24, 0x25	; 37
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	fc 01       	movw	r30, r24
     212:	80 81       	ld	r24, Z
     214:	88 2f       	mov	r24, r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	38 2f       	mov	r19, r24
     21a:	22 27       	eor	r18, r18
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	fc 01       	movw	r30, r24
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	28 2b       	or	r18, r24
     228:	39 2b       	or	r19, r25
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	fc 01       	movw	r30, r24
     230:	31 83       	std	Z+1, r19	; 0x01
     232:	20 83       	st	Z, r18
}
     234:	00 00       	nop
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <GetReading_voidAdc8bit>:
void GetReading_voidAdc8bit(u8 *u8Reading)
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	00 d0       	rcall	.+0      	; 0x246 <GetReading_voidAdc8bit+0x6>
     246:	00 d0       	rcall	.+0      	; 0x248 <GetReading_voidAdc8bit+0x8>
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	9c 83       	std	Y+4, r25	; 0x04
     24e:	8b 83       	std	Y+3, r24	; 0x03
	while((ADCSRA & (1<<ADIF))== 0 );
     250:	00 00       	nop
     252:	86 e2       	ldi	r24, 0x26	; 38
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	80 71       	andi	r24, 0x10	; 16
     260:	99 27       	eor	r25, r25
     262:	89 2b       	or	r24, r25
     264:	b1 f3       	breq	.-20     	; 0x252 <GetReading_voidAdc8bit+0x12>
u16 res;
res=ADCL;
     266:	84 e2       	ldi	r24, 0x24	; 36
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	fc 01       	movw	r30, r24
     26c:	80 81       	ld	r24, Z
     26e:	88 2f       	mov	r24, r24
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9a 83       	std	Y+2, r25	; 0x02
     274:	89 83       	std	Y+1, r24	; 0x01
res |=(ADCH <<8);
     276:	85 e2       	ldi	r24, 0x25	; 37
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	fc 01       	movw	r30, r24
     27c:	80 81       	ld	r24, Z
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	98 2f       	mov	r25, r24
     284:	88 27       	eor	r24, r24
     286:	9c 01       	movw	r18, r24
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	82 2b       	or	r24, r18
     28e:	93 2b       	or	r25, r19
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	89 83       	std	Y+1, r24	; 0x01
*u8Reading=res/4;
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	96 95       	lsr	r25
     29e:	87 95       	ror	r24
     2a0:	28 2f       	mov	r18, r24
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
}
     2aa:	00 00       	nop
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <Enable_void_Intrrupt_Adc>:
void Enable_void_Intrrupt_Adc()
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
     2c2:	86 e2       	ldi	r24, 0x26	; 38
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	26 e2       	ldi	r18, 0x26	; 38
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	28 60       	ori	r18, 0x08	; 8
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18

}
     2d4:	00 00       	nop
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <LM35>:

void LM35 (u16 *temp)
{  u16 reading;
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <LM35+0x6>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <LM35+0x8>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	9c 83       	std	Y+4, r25	; 0x04
     2ea:	8b 83       	std	Y+3, r24	; 0x03
	GetReading_voidAdc16bit(&reading);
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <GetReading_voidAdc16bit>
	*temp=reading*2.5/10;
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	cc 01       	movw	r24, r24
     2fa:	a0 e0       	ldi	r26, 0x00	; 0
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	bc 01       	movw	r22, r24
     300:	cd 01       	movw	r24, r26
     302:	0e 94 97 0a 	call	0x152e	; 0x152e <__floatunsisf>
     306:	dc 01       	movw	r26, r24
     308:	cb 01       	movw	r24, r22
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e2       	ldi	r20, 0x20	; 32
     310:	50 e4       	ldi	r21, 0x40	; 64
     312:	bc 01       	movw	r22, r24
     314:	cd 01       	movw	r24, r26
     316:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e2       	ldi	r20, 0x20	; 32
     324:	51 e4       	ldi	r21, 0x41	; 65
     326:	bc 01       	movw	r22, r24
     328:	cd 01       	movw	r24, r26
     32a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
     32e:	dc 01       	movw	r26, r24
     330:	cb 01       	movw	r24, r22
     332:	bc 01       	movw	r22, r24
     334:	cd 01       	movw	r24, r26
     336:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	9c 01       	movw	r18, r24
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	fc 01       	movw	r30, r24
     346:	31 83       	std	Z+1, r19	; 0x01
     348:	20 83       	st	Z, r18
}
     34a:	00 00       	nop
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <DIO_voidSetPinDirection>:
#include "DIO_int.h"
#include "BIT_MATH.h"
#include "AVR_DIO_REG.h"

u8 DIO_voidSetPinDirection (u8 Copy_u8Port,u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	00 d0       	rcall	.+0      	; 0x360 <DIO_voidSetPinDirection+0x6>
     360:	00 d0       	rcall	.+0      	; 0x362 <DIO_voidSetPinDirection+0x8>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	8a 83       	std	Y+2, r24	; 0x02
     368:	6b 83       	std	Y+3, r22	; 0x03
     36a:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = 0 ;
     36c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin	<=7&& Copy_u8Direction <=1 )
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	88 30       	cpi	r24, 0x08	; 8
     372:	08 f0       	brcs	.+2      	; 0x376 <DIO_voidSetPinDirection+0x1c>
     374:	a4 c0       	rjmp	.+328    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     376:	8c 81       	ldd	r24, Y+4	; 0x04
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	08 f0       	brcs	.+2      	; 0x37e <DIO_voidSetPinDirection+0x24>
     37c:	a0 c0       	rjmp	.+320    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	{
switch (Copy_u8Port)
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	88 2f       	mov	r24, r24
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	91 05       	cpc	r25, r1
     388:	81 f1       	breq	.+96     	; 0x3ea <DIO_voidSetPinDirection+0x90>
     38a:	82 30       	cpi	r24, 0x02	; 2
     38c:	91 05       	cpc	r25, r1
     38e:	1c f4       	brge	.+6      	; 0x396 <DIO_voidSetPinDirection+0x3c>
     390:	89 2b       	or	r24, r25
     392:	49 f0       	breq	.+18     	; 0x3a6 <DIO_voidSetPinDirection+0x4c>
     394:	90 c0       	rjmp	.+288    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	91 05       	cpc	r25, r1
     39a:	09 f4       	brne	.+2      	; 0x39e <DIO_voidSetPinDirection+0x44>
     39c:	48 c0       	rjmp	.+144    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     39e:	03 97       	sbiw	r24, 0x03	; 3
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <DIO_voidSetPinDirection+0x4a>
     3a2:	67 c0       	rjmp	.+206    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     3a4:	88 c0       	rjmp	.+272    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
{


case (DIO_PORTA):ASSIGN_BIT(DDRA,Copy_u8Pin,Copy_u8Direction); break;
     3a6:	8a e3       	ldi	r24, 0x3A	; 58
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	2a e3       	ldi	r18, 0x3A	; 58
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	62 2f       	mov	r22, r18
     3b4:	2b 81       	ldd	r18, Y+3	; 0x03
     3b6:	42 2f       	mov	r20, r18
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_voidSetPinDirection+0x6a>
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	4a 95       	dec	r20
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_voidSetPinDirection+0x66>
     3c8:	20 95       	com	r18
     3ca:	62 23       	and	r22, r18
     3cc:	2c 81       	ldd	r18, Y+4	; 0x04
     3ce:	22 2f       	mov	r18, r18
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	4b 81       	ldd	r20, Y+3	; 0x03
     3d4:	44 2f       	mov	r20, r20
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_voidSetPinDirection+0x84>
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	4a 95       	dec	r20
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_voidSetPinDirection+0x80>
     3e2:	26 2b       	or	r18, r22
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
     3e8:	69 c0       	rjmp	.+210    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
case (DIO_PORTB):ASSIGN_BIT(DDRB,Copy_u8Pin,Copy_u8Direction); break;
     3ea:	87 e3       	ldi	r24, 0x37	; 55
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	27 e3       	ldi	r18, 0x37	; 55
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	62 2f       	mov	r22, r18
     3f8:	2b 81       	ldd	r18, Y+3	; 0x03
     3fa:	42 2f       	mov	r20, r18
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	4a 95       	dec	r20
     40a:	e2 f7       	brpl	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	20 95       	com	r18
     40e:	62 23       	and	r22, r18
     410:	2c 81       	ldd	r18, Y+4	; 0x04
     412:	22 2f       	mov	r18, r18
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	4b 81       	ldd	r20, Y+3	; 0x03
     418:	44 2f       	mov	r20, r20
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	22 0f       	add	r18, r18
     420:	33 1f       	adc	r19, r19
     422:	4a 95       	dec	r20
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	26 2b       	or	r18, r22
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
     42c:	47 c0       	rjmp	.+142    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
case (DIO_PORTC):ASSIGN_BIT(DDRC,Copy_u8Pin,Copy_u8Direction); break;
     42e:	84 e3       	ldi	r24, 0x34	; 52
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	24 e3       	ldi	r18, 0x34	; 52
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	62 2f       	mov	r22, r18
     43c:	2b 81       	ldd	r18, Y+3	; 0x03
     43e:	42 2f       	mov	r20, r18
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     448:	22 0f       	add	r18, r18
     44a:	33 1f       	adc	r19, r19
     44c:	4a 95       	dec	r20
     44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     450:	20 95       	com	r18
     452:	62 23       	and	r22, r18
     454:	2c 81       	ldd	r18, Y+4	; 0x04
     456:	22 2f       	mov	r18, r18
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	4b 81       	ldd	r20, Y+3	; 0x03
     45c:	44 2f       	mov	r20, r20
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	4a 95       	dec	r20
     468:	e2 f7       	brpl	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     46a:	26 2b       	or	r18, r22
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
     470:	25 c0       	rjmp	.+74     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
case (DIO_PORTD):ASSIGN_BIT(DDRD,Copy_u8Pin,Copy_u8Direction); break;
     472:	81 e3       	ldi	r24, 0x31	; 49
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	21 e3       	ldi	r18, 0x31	; 49
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	62 2f       	mov	r22, r18
     480:	2b 81       	ldd	r18, Y+3	; 0x03
     482:	42 2f       	mov	r20, r18
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	4a 95       	dec	r20
     492:	e2 f7       	brpl	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     494:	20 95       	com	r18
     496:	62 23       	and	r22, r18
     498:	2c 81       	ldd	r18, Y+4	; 0x04
     49a:	22 2f       	mov	r18, r18
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	4b 81       	ldd	r20, Y+3	; 0x03
     4a0:	44 2f       	mov	r20, r20
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a6:	22 0f       	add	r18, r18
     4a8:	33 1f       	adc	r19, r19
     4aa:	4a 95       	dec	r20
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4ae:	26 2b       	or	r18, r22
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
default : local_u8ErrorState=1; break;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	00 00       	nop
}}
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	else {

 local_u8ErrorState=1;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	89 83       	std	Y+1, r24	; 0x01

	}
return  local_u8ErrorState  ;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <DIO_voidSetPinValue>:



u8 DIO_voidSetPinValue (u8 Copy_u8Port,u8 Copy_u8Pin , u8 Copy_u8Value)

{
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <DIO_voidSetPinValue+0x6>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <DIO_voidSetPinValue+0x8>
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	6b 83       	std	Y+3, r22	; 0x03
     4e2:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = 0 ;
     4e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin	<=7&& Copy_u8Value <=1 )
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	88 30       	cpi	r24, 0x08	; 8
     4ea:	08 f0       	brcs	.+2      	; 0x4ee <DIO_voidSetPinValue+0x1c>
     4ec:	a4 c0       	rjmp	.+328    	; 0x636 <DIO_voidSetPinValue+0x164>
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <DIO_voidSetPinValue+0x24>
     4f4:	a0 c0       	rjmp	.+320    	; 0x636 <DIO_voidSetPinValue+0x164>
	{
switch (Copy_u8Port)
     4f6:	8a 81       	ldd	r24, Y+2	; 0x02
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	91 05       	cpc	r25, r1
     500:	81 f1       	breq	.+96     	; 0x562 <DIO_voidSetPinValue+0x90>
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	91 05       	cpc	r25, r1
     506:	1c f4       	brge	.+6      	; 0x50e <DIO_voidSetPinValue+0x3c>
     508:	89 2b       	or	r24, r25
     50a:	49 f0       	breq	.+18     	; 0x51e <DIO_voidSetPinValue+0x4c>
     50c:	90 c0       	rjmp	.+288    	; 0x62e <DIO_voidSetPinValue+0x15c>
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	91 05       	cpc	r25, r1
     512:	09 f4       	brne	.+2      	; 0x516 <DIO_voidSetPinValue+0x44>
     514:	48 c0       	rjmp	.+144    	; 0x5a6 <DIO_voidSetPinValue+0xd4>
     516:	03 97       	sbiw	r24, 0x03	; 3
     518:	09 f4       	brne	.+2      	; 0x51c <DIO_voidSetPinValue+0x4a>
     51a:	67 c0       	rjmp	.+206    	; 0x5ea <DIO_voidSetPinValue+0x118>
     51c:	88 c0       	rjmp	.+272    	; 0x62e <DIO_voidSetPinValue+0x15c>
{


case (DIO_PORTA):ASSIGN_BIT(PORTA , Copy_u8Pin , Copy_u8Value); break;
     51e:	8b e3       	ldi	r24, 0x3B	; 59
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	2b e3       	ldi	r18, 0x3B	; 59
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	20 81       	ld	r18, Z
     52a:	62 2f       	mov	r22, r18
     52c:	2b 81       	ldd	r18, Y+3	; 0x03
     52e:	42 2f       	mov	r20, r18
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_voidSetPinValue+0x6a>
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	4a 95       	dec	r20
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_voidSetPinValue+0x66>
     540:	20 95       	com	r18
     542:	62 23       	and	r22, r18
     544:	2c 81       	ldd	r18, Y+4	; 0x04
     546:	22 2f       	mov	r18, r18
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	4b 81       	ldd	r20, Y+3	; 0x03
     54c:	44 2f       	mov	r20, r20
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_voidSetPinValue+0x84>
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	4a 95       	dec	r20
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_voidSetPinValue+0x80>
     55a:	26 2b       	or	r18, r22
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	69 c0       	rjmp	.+210    	; 0x634 <DIO_voidSetPinValue+0x162>
case (DIO_PORTB):ASSIGN_BIT(PORTB , Copy_u8Pin , Copy_u8Value); break;
     562:	88 e3       	ldi	r24, 0x38	; 56
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	28 e3       	ldi	r18, 0x38	; 56
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	62 2f       	mov	r22, r18
     570:	2b 81       	ldd	r18, Y+3	; 0x03
     572:	42 2f       	mov	r20, r18
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_voidSetPinValue+0xae>
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	4a 95       	dec	r20
     582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_voidSetPinValue+0xaa>
     584:	20 95       	com	r18
     586:	62 23       	and	r22, r18
     588:	2c 81       	ldd	r18, Y+4	; 0x04
     58a:	22 2f       	mov	r18, r18
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	4b 81       	ldd	r20, Y+3	; 0x03
     590:	44 2f       	mov	r20, r20
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_voidSetPinValue+0xc8>
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	4a 95       	dec	r20
     59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_voidSetPinValue+0xc4>
     59e:	26 2b       	or	r18, r22
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
     5a4:	47 c0       	rjmp	.+142    	; 0x634 <DIO_voidSetPinValue+0x162>
case (DIO_PORTC):ASSIGN_BIT(PORTC , Copy_u8Pin , Copy_u8Value); break;
     5a6:	85 e3       	ldi	r24, 0x35	; 53
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	25 e3       	ldi	r18, 0x35	; 53
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	20 81       	ld	r18, Z
     5b2:	62 2f       	mov	r22, r18
     5b4:	2b 81       	ldd	r18, Y+3	; 0x03
     5b6:	42 2f       	mov	r20, r18
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_voidSetPinValue+0xf2>
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	4a 95       	dec	r20
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_voidSetPinValue+0xee>
     5c8:	20 95       	com	r18
     5ca:	62 23       	and	r22, r18
     5cc:	2c 81       	ldd	r18, Y+4	; 0x04
     5ce:	22 2f       	mov	r18, r18
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	4b 81       	ldd	r20, Y+3	; 0x03
     5d4:	44 2f       	mov	r20, r20
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_voidSetPinValue+0x10c>
     5da:	22 0f       	add	r18, r18
     5dc:	33 1f       	adc	r19, r19
     5de:	4a 95       	dec	r20
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_voidSetPinValue+0x108>
     5e2:	26 2b       	or	r18, r22
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
     5e8:	25 c0       	rjmp	.+74     	; 0x634 <DIO_voidSetPinValue+0x162>
case (DIO_PORTD):ASSIGN_BIT(PORTD , Copy_u8Pin , Copy_u8Value); break;
     5ea:	82 e3       	ldi	r24, 0x32	; 50
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	22 e3       	ldi	r18, 0x32	; 50
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	62 2f       	mov	r22, r18
     5f8:	2b 81       	ldd	r18, Y+3	; 0x03
     5fa:	42 2f       	mov	r20, r18
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_voidSetPinValue+0x136>
     604:	22 0f       	add	r18, r18
     606:	33 1f       	adc	r19, r19
     608:	4a 95       	dec	r20
     60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_voidSetPinValue+0x132>
     60c:	20 95       	com	r18
     60e:	62 23       	and	r22, r18
     610:	2c 81       	ldd	r18, Y+4	; 0x04
     612:	22 2f       	mov	r18, r18
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	4b 81       	ldd	r20, Y+3	; 0x03
     618:	44 2f       	mov	r20, r20
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_voidSetPinValue+0x150>
     61e:	22 0f       	add	r18, r18
     620:	33 1f       	adc	r19, r19
     622:	4a 95       	dec	r20
     624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_voidSetPinValue+0x14c>
     626:	26 2b       	or	r18, r22
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
     62c:	03 c0       	rjmp	.+6      	; 0x634 <DIO_voidSetPinValue+0x162>

default : local_u8ErrorState=1; break;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	00 00       	nop
}}
     634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_voidSetPinValue+0x168>
	else {

 local_u8ErrorState=1;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	89 83       	std	Y+1, r24	; 0x01

	}
return  local_u8ErrorState  ;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <DIO_u8SetSeven>:



void DIO_u8SetSeven(u8 Copy_u8Port,u8 Num)
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	2c 97       	sbiw	r28, 0x0c	; 12
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	8b 87       	std	Y+11, r24	; 0x0b
     660:	6c 87       	std	Y+12, r22	; 0x0c

u8 ArrayNum[10] ={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	e8 e6       	ldi	r30, 0x68	; 104
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	dc 01       	movw	r26, r24
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	2a 95       	dec	r18
     674:	e1 f7       	brne	.-8      	; 0x66e <DIO_u8SetSeven+0x24>

DIO_voidSetPortDirection(DIO_PORTA,DIO_PORT_OUTPUT);
     676:	6f ef       	ldi	r22, 0xFF	; 255
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 ac 03 	call	0x758	; 0x758 <DIO_voidSetPortDirection>


switch (Num)
     67e:	8c 85       	ldd	r24, Y+12	; 0x0c
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	09 2e       	mov	r0, r25
     686:	00 0c       	add	r0, r0
     688:	aa 0b       	sbc	r26, r26
     68a:	bb 0b       	sbc	r27, r27
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	29 e0       	ldi	r18, 0x09	; 9
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	84 1b       	sub	r24, r20
     696:	95 0b       	sbc	r25, r21
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	08 f4       	brcc	.+2      	; 0x6a0 <DIO_u8SetSeven+0x56>
     69e:	4b c0       	rjmp	.+150    	; 0x736 <DIO_u8SetSeven+0xec>
     6a0:	86 5d       	subi	r24, 0xD6	; 214
     6a2:	9f 4f       	sbci	r25, 0xFF	; 255
     6a4:	fc 01       	movw	r30, r24
     6a6:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__tablejump2__>
{
case 0:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[0]);break ;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	80 95       	com	r24
     6ae:	68 2f       	mov	r22, r24
     6b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     6b6:	46 c0       	rjmp	.+140    	; 0x744 <DIO_u8SetSeven+0xfa>
case 1:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[1]);break ;
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	80 95       	com	r24
     6bc:	68 2f       	mov	r22, r24
     6be:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     6c4:	3f c0       	rjmp	.+126    	; 0x744 <DIO_u8SetSeven+0xfa>
case 2:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[2]);break ;
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	80 95       	com	r24
     6ca:	68 2f       	mov	r22, r24
     6cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ce:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     6d2:	38 c0       	rjmp	.+112    	; 0x744 <DIO_u8SetSeven+0xfa>
case 3:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[3]);break ;
     6d4:	8c 81       	ldd	r24, Y+4	; 0x04
     6d6:	80 95       	com	r24
     6d8:	68 2f       	mov	r22, r24
     6da:	8b 85       	ldd	r24, Y+11	; 0x0b
     6dc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     6e0:	31 c0       	rjmp	.+98     	; 0x744 <DIO_u8SetSeven+0xfa>
case 4:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[4]);break ;
     6e2:	8d 81       	ldd	r24, Y+5	; 0x05
     6e4:	80 95       	com	r24
     6e6:	68 2f       	mov	r22, r24
     6e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ea:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <DIO_u8SetSeven+0xfa>
case 5:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[5]);break ;
     6f0:	8e 81       	ldd	r24, Y+6	; 0x06
     6f2:	80 95       	com	r24
     6f4:	68 2f       	mov	r22, r24
     6f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     6fc:	23 c0       	rjmp	.+70     	; 0x744 <DIO_u8SetSeven+0xfa>
case 6:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[6]);break ;
     6fe:	8f 81       	ldd	r24, Y+7	; 0x07
     700:	80 95       	com	r24
     702:	68 2f       	mov	r22, r24
     704:	8b 85       	ldd	r24, Y+11	; 0x0b
     706:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     70a:	1c c0       	rjmp	.+56     	; 0x744 <DIO_u8SetSeven+0xfa>
case 7:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[7]);break ;
     70c:	88 85       	ldd	r24, Y+8	; 0x08
     70e:	80 95       	com	r24
     710:	68 2f       	mov	r22, r24
     712:	8b 85       	ldd	r24, Y+11	; 0x0b
     714:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     718:	15 c0       	rjmp	.+42     	; 0x744 <DIO_u8SetSeven+0xfa>
case 8:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[8]);break ;
     71a:	89 85       	ldd	r24, Y+9	; 0x09
     71c:	80 95       	com	r24
     71e:	68 2f       	mov	r22, r24
     720:	8b 85       	ldd	r24, Y+11	; 0x0b
     722:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     726:	0e c0       	rjmp	.+28     	; 0x744 <DIO_u8SetSeven+0xfa>
case 9:DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[9]);break ;
     728:	8a 85       	ldd	r24, Y+10	; 0x0a
     72a:	80 95       	com	r24
     72c:	68 2f       	mov	r22, r24
     72e:	8b 85       	ldd	r24, Y+11	; 0x0b
     730:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     734:	07 c0       	rjmp	.+14     	; 0x744 <DIO_u8SetSeven+0xfa>
default : DIO_voidSetPortValue (Copy_u8Port , ~ArrayNum[0]);break ;
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	80 95       	com	r24
     73a:	68 2f       	mov	r22, r24
     73c:	8b 85       	ldd	r24, Y+11	; 0x0b
     73e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
     742:	00 00       	nop
}



}
     744:	00 00       	nop
     746:	2c 96       	adiw	r28, 0x0c	; 12
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)

{
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	00 d0       	rcall	.+0      	; 0x75e <DIO_voidSetPortDirection+0x6>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	6a 83       	std	Y+2, r22	; 0x02
switch (Copy_u8Port)
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	91 05       	cpc	r25, r1
     770:	91 f0       	breq	.+36     	; 0x796 <DIO_voidSetPortDirection+0x3e>
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	91 05       	cpc	r25, r1
     776:	1c f4       	brge	.+6      	; 0x77e <DIO_voidSetPortDirection+0x26>
     778:	89 2b       	or	r24, r25
     77a:	39 f0       	breq	.+14     	; 0x78a <DIO_voidSetPortDirection+0x32>
case (DIO_PORTB):DDRB =Copy_u8Direction; break ;
case (DIO_PORTC):DDRC =Copy_u8Direction; break ;
case (DIO_PORTD):DDRD =Copy_u8Direction; break ;
}

}
     77c:	1e c0       	rjmp	.+60     	; 0x7ba <DIO_voidSetPortDirection+0x62>

}
void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)

{
switch (Copy_u8Port)
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	91 05       	cpc	r25, r1
     782:	79 f0       	breq	.+30     	; 0x7a2 <DIO_voidSetPortDirection+0x4a>
     784:	03 97       	sbiw	r24, 0x03	; 3
     786:	99 f0       	breq	.+38     	; 0x7ae <DIO_voidSetPortDirection+0x56>
case (DIO_PORTB):DDRB =Copy_u8Direction; break ;
case (DIO_PORTC):DDRC =Copy_u8Direction; break ;
case (DIO_PORTD):DDRD =Copy_u8Direction; break ;
}

}
     788:	18 c0       	rjmp	.+48     	; 0x7ba <DIO_voidSetPortDirection+0x62>
void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)

{
switch (Copy_u8Port)
{
case (DIO_PORTA):DDRA =Copy_u8Direction; break ;
     78a:	8a e3       	ldi	r24, 0x3A	; 58
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	2a 81       	ldd	r18, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
     794:	12 c0       	rjmp	.+36     	; 0x7ba <DIO_voidSetPortDirection+0x62>
case (DIO_PORTB):DDRB =Copy_u8Direction; break ;
     796:	87 e3       	ldi	r24, 0x37	; 55
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	2a 81       	ldd	r18, Y+2	; 0x02
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
     7a0:	0c c0       	rjmp	.+24     	; 0x7ba <DIO_voidSetPortDirection+0x62>
case (DIO_PORTC):DDRC =Copy_u8Direction; break ;
     7a2:	84 e3       	ldi	r24, 0x34	; 52
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	2a 81       	ldd	r18, Y+2	; 0x02
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <DIO_voidSetPortDirection+0x62>
case (DIO_PORTD):DDRD =Copy_u8Direction; break ;
     7ae:	81 e3       	ldi	r24, 0x31	; 49
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	2a 81       	ldd	r18, Y+2	; 0x02
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
     7b8:	00 00       	nop
}

}
     7ba:	00 00       	nop
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)

{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <DIO_voidSetPortValue+0x6>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	6a 83       	std	Y+2, r22	; 0x02
switch (Copy_u8Port)
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	91 05       	cpc	r25, r1
     7de:	91 f0       	breq	.+36     	; 0x804 <DIO_voidSetPortValue+0x3e>
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	91 05       	cpc	r25, r1
     7e4:	1c f4       	brge	.+6      	; 0x7ec <DIO_voidSetPortValue+0x26>
     7e6:	89 2b       	or	r24, r25
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <DIO_voidSetPortValue+0x32>
case (DIO_PORTB):PORTB =Copy_u8Value; break ;
case (DIO_PORTC):PORTC =Copy_u8Value; break ;
case (DIO_PORTD):PORTD =Copy_u8Value; break ;
}

}
     7ea:	1e c0       	rjmp	.+60     	; 0x828 <DIO_voidSetPortValue+0x62>
}

void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)

{
switch (Copy_u8Port)
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	91 05       	cpc	r25, r1
     7f0:	79 f0       	breq	.+30     	; 0x810 <DIO_voidSetPortValue+0x4a>
     7f2:	03 97       	sbiw	r24, 0x03	; 3
     7f4:	99 f0       	breq	.+38     	; 0x81c <DIO_voidSetPortValue+0x56>
case (DIO_PORTB):PORTB =Copy_u8Value; break ;
case (DIO_PORTC):PORTC =Copy_u8Value; break ;
case (DIO_PORTD):PORTD =Copy_u8Value; break ;
}

}
     7f6:	18 c0       	rjmp	.+48     	; 0x828 <DIO_voidSetPortValue+0x62>
void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)

{
switch (Copy_u8Port)
{
case (DIO_PORTA):PORTA =Copy_u8Value; break ;
     7f8:	8b e3       	ldi	r24, 0x3B	; 59
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2a 81       	ldd	r18, Y+2	; 0x02
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
     802:	12 c0       	rjmp	.+36     	; 0x828 <DIO_voidSetPortValue+0x62>
case (DIO_PORTB):PORTB =Copy_u8Value; break ;
     804:	88 e3       	ldi	r24, 0x38	; 56
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2a 81       	ldd	r18, Y+2	; 0x02
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	0c c0       	rjmp	.+24     	; 0x828 <DIO_voidSetPortValue+0x62>
case (DIO_PORTC):PORTC =Copy_u8Value; break ;
     810:	85 e3       	ldi	r24, 0x35	; 53
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	2a 81       	ldd	r18, Y+2	; 0x02
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
     81a:	06 c0       	rjmp	.+12     	; 0x828 <DIO_voidSetPortValue+0x62>
case (DIO_PORTD):PORTD =Copy_u8Value; break ;
     81c:	82 e3       	ldi	r24, 0x32	; 50
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2a 81       	ldd	r18, Y+2	; 0x02
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
     826:	00 00       	nop
}

}
     828:	00 00       	nop
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue (u8 Copy_u8Port, u8 Copy_u8Pin , u8 *Copy_Pu8Value)
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <DIO_u8GetPinValue+0x6>
     83a:	00 d0       	rcall	.+0      	; 0x83c <DIO_u8GetPinValue+0x8>
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	8a 83       	std	Y+2, r24	; 0x02
     844:	6b 83       	std	Y+3, r22	; 0x03
     846:	5d 83       	std	Y+5, r21	; 0x05
     848:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8ErrorState=0;
     84a:	19 82       	std	Y+1, r1	; 0x01
switch (Copy_u8Port)
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	91 05       	cpc	r25, r1
     856:	11 f1       	breq	.+68     	; 0x89c <__stack+0x3d>
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	91 05       	cpc	r25, r1
     85c:	1c f4       	brge	.+6      	; 0x864 <__stack+0x5>
     85e:	89 2b       	or	r24, r25
     860:	41 f0       	breq	.+16     	; 0x872 <__stack+0x13>
     862:	5b c0       	rjmp	.+182    	; 0x91a <__stack+0xbb>
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	91 05       	cpc	r25, r1
     868:	71 f1       	breq	.+92     	; 0x8c6 <__stack+0x67>
     86a:	03 97       	sbiw	r24, 0x03	; 3
     86c:	09 f4       	brne	.+2      	; 0x870 <__stack+0x11>
     86e:	40 c0       	rjmp	.+128    	; 0x8f0 <__stack+0x91>
     870:	54 c0       	rjmp	.+168    	; 0x91a <__stack+0xbb>
{
case (DIO_PORTA):*Copy_Pu8Value=GET_BIT(PINA,Copy_u8Pin) ;  break ;
     872:	89 e3       	ldi	r24, 0x39	; 57
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fc 01       	movw	r30, r24
     878:	80 81       	ld	r24, Z
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2b 81       	ldd	r18, Y+3	; 0x03
     880:	22 2f       	mov	r18, r18
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	95 95       	asr	r25
     888:	87 95       	ror	r24
     88a:	2a 95       	dec	r18
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	28 2f       	mov	r18, r24
     890:	21 70       	andi	r18, 0x01	; 1
     892:	8c 81       	ldd	r24, Y+4	; 0x04
     894:	9d 81       	ldd	r25, Y+5	; 0x05
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	41 c0       	rjmp	.+130    	; 0x91e <__stack+0xbf>
case (DIO_PORTB):*Copy_Pu8Value=GET_BIT(PINB,Copy_u8Pin) ;  break ;
     89c:	86 e3       	ldi	r24, 0x36	; 54
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	fc 01       	movw	r30, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	88 2f       	mov	r24, r24
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	2b 81       	ldd	r18, Y+3	; 0x03
     8aa:	22 2f       	mov	r18, r18
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	2a 95       	dec	r18
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	28 2f       	mov	r18, r24
     8ba:	21 70       	andi	r18, 0x01	; 1
     8bc:	8c 81       	ldd	r24, Y+4	; 0x04
     8be:	9d 81       	ldd	r25, Y+5	; 0x05
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
     8c4:	2c c0       	rjmp	.+88     	; 0x91e <__stack+0xbf>
case (DIO_PORTC):*Copy_Pu8Value=GET_BIT(PINC,Copy_u8Pin) ;  break ;
     8c6:	83 e3       	ldi	r24, 0x33	; 51
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2b 81       	ldd	r18, Y+3	; 0x03
     8d4:	22 2f       	mov	r18, r18
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	2a 95       	dec	r18
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
     8e2:	28 2f       	mov	r18, r24
     8e4:	21 70       	andi	r18, 0x01	; 1
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	9d 81       	ldd	r25, Y+5	; 0x05
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0xbf>
case (DIO_PORTD):*Copy_Pu8Value=GET_BIT(PIND,Copy_u8Pin) ;  break ;
     8f0:	80 e3       	ldi	r24, 0x30	; 48
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
     8f8:	88 2f       	mov	r24, r24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	2b 81       	ldd	r18, Y+3	; 0x03
     8fe:	22 2f       	mov	r18, r18
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	95 95       	asr	r25
     906:	87 95       	ror	r24
     908:	2a 95       	dec	r18
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
     90c:	28 2f       	mov	r18, r24
     90e:	21 70       	andi	r18, 0x01	; 1
     910:	8c 81       	ldd	r24, Y+4	; 0x04
     912:	9d 81       	ldd	r25, Y+5	; 0x05
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>

default: Local_u8ErrorState=1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8ErrorState;
     91e:	89 81       	ldd	r24, Y+1	; 0x01
}
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <EXTI_void_callback>:
#include "EXTI.h"
#include "timer0.h"
void (*funptr[19])(void)= {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};

void EXTI_void_callback(void (*fun )(void),u8 Copy_u8IdNum )
{
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	00 d0       	rcall	.+0      	; 0x936 <EXTI_void_callback+0x6>
     936:	1f 92       	push	r1
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	6b 83       	std	Y+3, r22	; 0x03
	//funptr=fun ;
	if(fun != NULL)
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	89 2b       	or	r24, r25
     948:	69 f1       	breq	.+90     	; 0x9a4 <EXTI_void_callback+0x74>
	{
		if( Copy_u8IdNum==1)
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	31 f4       	brne	.+12     	; 0x95c <EXTI_void_callback+0x2c>
		{
                funptr[0]=fun;
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
     958:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		}
		if( Copy_u8IdNum==2)
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	31 f4       	brne	.+12     	; 0x96e <EXTI_void_callback+0x3e>
				{
		                funptr[1]=fun;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x3>
     96a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end+0x2>
				}
		if( Copy_u8IdNum==3)
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	83 30       	cpi	r24, 0x03	; 3
     972:	31 f4       	brne	.+12     	; 0x980 <EXTI_void_callback+0x50>
				{
		                funptr[2]=fun;
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x5>
     97c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end+0x4>
				}
		if( Copy_u8IdNum==11)
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	8b 30       	cpi	r24, 0x0B	; 11
     984:	31 f4       	brne	.+12     	; 0x992 <EXTI_void_callback+0x62>
						{
				                funptr[10]=fun;
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <__data_end+0x15>
     98e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end+0x14>
						}
		if( Copy_u8IdNum==16)
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	80 31       	cpi	r24, 0x10	; 16
     996:	31 f4       	brne	.+12     	; 0x9a4 <EXTI_void_callback+0x74>
								{
						                funptr[15]=fun;
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <__data_end+0x1f>
     9a0:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <__data_end+0x1e>
								}
	}


}
     9a4:	00 00       	nop
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <__vector_1>:
void __vector_1 (void)
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
if(funptr[0] !=NULL)
     9ba:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     9be:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
     9c2:	89 2b       	or	r24, r25
     9c4:	41 f0       	breq	.+16     	; 0x9d6 <__vector_1+0x24>
	{funptr[0]();
     9c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     9ca:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
     9ce:	fc 01       	movw	r30, r24
     9d0:	09 95       	icall
	Sie();
     9d2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Sie>
	}

}
     9d6:	00 00       	nop
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <__vector_2>:
void __vector_2 (void)
{
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
	Sie();}
     9e6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Sie>
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <__vector_3>:
void __vector_3 (void)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	Sie();}
     9f8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Sie>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <__vector_11>:
//TIMER OVERFLOW
void __vector_11 (void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
if(funptr[10] !=NULL)
     a0a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x14>
     a0e:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x15>
     a12:	89 2b       	or	r24, r25
     a14:	51 f0       	breq	.+20     	; 0xa2a <__vector_11+0x28>
	{
	funptr[10]();
     a16:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x14>
     a1a:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x15>
     a1e:	fc 01       	movw	r30, r24
     a20:	09 95       	icall
	Enable_voidOverFlowInterrupt();
     a22:	0e 94 da 09 	call	0x13b4	; 0x13b4 <Enable_voidOverFlowInterrupt>
	Sie();
     a26:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Sie>
	}

}
     a2a:	00 00       	nop
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <__vector_16>:
//ADC Conversion Complete
void __vector_16 (void)
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
if(funptr[15] !=NULL)
     a3a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end+0x1e>
     a3e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <__data_end+0x1f>
     a42:	89 2b       	or	r24, r25
     a44:	41 f0       	breq	.+16     	; 0xa56 <__vector_16+0x24>
	{
	funptr[15]();
     a46:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end+0x1e>
     a4a:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <__data_end+0x1f>
     a4e:	fc 01       	movw	r30, r24
     a50:	09 95       	icall
	Sie();
     a52:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Sie>
	}

}
     a56:	00 00       	nop
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <Sie>:


//Enable Global Interrupt
void Sie(void)
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     a66:	8f e5       	ldi	r24, 0x5F	; 95
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	2f e5       	ldi	r18, 0x5F	; 95
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	20 68       	ori	r18, 0x80	; 128
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
}
     a78:	00 00       	nop
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <EXTI_void_MCUCR>:

//TYPE OF raising or falling edges

void EXTI_void_MCUCR(u8 IntrruptType,u8 LevelType)
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	00 d0       	rcall	.+0      	; 0xa86 <EXTI_void_MCUCR+0x6>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	6a 83       	std	Y+2, r22	; 0x02

switch (IntrruptType)
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	21 f0       	breq	.+8      	; 0xaa0 <EXTI_void_MCUCR+0x20>
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	09 f4       	brne	.+2      	; 0xa9e <EXTI_void_MCUCR+0x1e>
     a9c:	60 c0       	rjmp	.+192    	; 0xb5e <EXTI_void_MCUCR+0xde>
		default : break ;
		break ;
		}
	break;

default : break ;
     a9e:	be c0       	rjmp	.+380    	; 0xc1c <EXTI_void_MCUCR+0x19c>

switch (IntrruptType)
{
case 0 :

	switch (LevelType)
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	91 05       	cpc	r25, r1
     aaa:	f9 f0       	breq	.+62     	; 0xaea <EXTI_void_MCUCR+0x6a>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	91 05       	cpc	r25, r1
     ab0:	1c f4       	brge	.+6      	; 0xab8 <EXTI_void_MCUCR+0x38>
     ab2:	89 2b       	or	r24, r25
     ab4:	39 f0       	breq	.+14     	; 0xac4 <EXTI_void_MCUCR+0x44>
	{
	case 0 : CLEAR_BIT(MCUCR,0); CLEAR_BIT(MCUCR,1); break ;
	case 1 : SET_BIT(MCUCR,0);   CLEAR_BIT(MCUCR,1); break ;
	case 2 : CLEAR_BIT(MCUCR,0); SET_BIT(MCUCR,1);  break ;
	case 3 : SET_BIT(MCUCR,0);   SET_BIT(MCUCR,1);  break ;
	default : break ;
     ab6:	52 c0       	rjmp	.+164    	; 0xb5c <EXTI_void_MCUCR+0xdc>

switch (IntrruptType)
{
case 0 :

	switch (LevelType)
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	91 05       	cpc	r25, r1
     abc:	49 f1       	breq	.+82     	; 0xb10 <EXTI_void_MCUCR+0x90>
     abe:	03 97       	sbiw	r24, 0x03	; 3
     ac0:	d1 f1       	breq	.+116    	; 0xb36 <EXTI_void_MCUCR+0xb6>
	{
	case 0 : CLEAR_BIT(MCUCR,0); CLEAR_BIT(MCUCR,1); break ;
	case 1 : SET_BIT(MCUCR,0);   CLEAR_BIT(MCUCR,1); break ;
	case 2 : CLEAR_BIT(MCUCR,0); SET_BIT(MCUCR,1);  break ;
	case 3 : SET_BIT(MCUCR,0);   SET_BIT(MCUCR,1);  break ;
	default : break ;
     ac2:	4c c0       	rjmp	.+152    	; 0xb5c <EXTI_void_MCUCR+0xdc>
{
case 0 :

	switch (LevelType)
	{
	case 0 : CLEAR_BIT(MCUCR,0); CLEAR_BIT(MCUCR,1); break ;
     ac4:	85 e5       	ldi	r24, 0x55	; 85
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	25 e5       	ldi	r18, 0x55	; 85
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	20 81       	ld	r18, Z
     ad0:	2e 7f       	andi	r18, 0xFE	; 254
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
     ad6:	85 e5       	ldi	r24, 0x55	; 85
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	25 e5       	ldi	r18, 0x55	; 85
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	2d 7f       	andi	r18, 0xFD	; 253
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
     ae8:	39 c0       	rjmp	.+114    	; 0xb5c <EXTI_void_MCUCR+0xdc>
	case 1 : SET_BIT(MCUCR,0);   CLEAR_BIT(MCUCR,1); break ;
     aea:	85 e5       	ldi	r24, 0x55	; 85
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	25 e5       	ldi	r18, 0x55	; 85
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	20 81       	ld	r18, Z
     af6:	21 60       	ori	r18, 0x01	; 1
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	85 e5       	ldi	r24, 0x55	; 85
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	25 e5       	ldi	r18, 0x55	; 85
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	f9 01       	movw	r30, r18
     b06:	20 81       	ld	r18, Z
     b08:	2d 7f       	andi	r18, 0xFD	; 253
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 83       	st	Z, r18
     b0e:	26 c0       	rjmp	.+76     	; 0xb5c <EXTI_void_MCUCR+0xdc>
	case 2 : CLEAR_BIT(MCUCR,0); SET_BIT(MCUCR,1);  break ;
     b10:	85 e5       	ldi	r24, 0x55	; 85
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	25 e5       	ldi	r18, 0x55	; 85
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	f9 01       	movw	r30, r18
     b1a:	20 81       	ld	r18, Z
     b1c:	2e 7f       	andi	r18, 0xFE	; 254
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
     b22:	85 e5       	ldi	r24, 0x55	; 85
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	25 e5       	ldi	r18, 0x55	; 85
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	f9 01       	movw	r30, r18
     b2c:	20 81       	ld	r18, Z
     b2e:	22 60       	ori	r18, 0x02	; 2
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
     b34:	13 c0       	rjmp	.+38     	; 0xb5c <EXTI_void_MCUCR+0xdc>
	case 3 : SET_BIT(MCUCR,0);   SET_BIT(MCUCR,1);  break ;
     b36:	85 e5       	ldi	r24, 0x55	; 85
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	25 e5       	ldi	r18, 0x55	; 85
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	21 60       	ori	r18, 0x01	; 1
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	85 e5       	ldi	r24, 0x55	; 85
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	25 e5       	ldi	r18, 0x55	; 85
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	f9 01       	movw	r30, r18
     b52:	20 81       	ld	r18, Z
     b54:	22 60       	ori	r18, 0x02	; 2
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
     b5a:	00 00       	nop
	default : break ;
	break ;
	}
	break;
     b5c:	5f c0       	rjmp	.+190    	; 0xc1c <EXTI_void_MCUCR+0x19c>

case 1 :

	switch (LevelType)
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	f9 f0       	breq	.+62     	; 0xba8 <EXTI_void_MCUCR+0x128>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	91 05       	cpc	r25, r1
     b6e:	1c f4       	brge	.+6      	; 0xb76 <EXTI_void_MCUCR+0xf6>
     b70:	89 2b       	or	r24, r25
     b72:	39 f0       	breq	.+14     	; 0xb82 <EXTI_void_MCUCR+0x102>
		{
	    case 0 : CLEAR_BIT(MCUCR,2); CLEAR_BIT(MCUCR,3); break ;
		case 1 : SET_BIT(MCUCR,2);   CLEAR_BIT(MCUCR,3); break ;
		case 2 : CLEAR_BIT(MCUCR,2); SET_BIT(MCUCR,3);  break ;
		case 3 : SET_BIT(MCUCR,2);   SET_BIT(MCUCR,3);  break ;
		default : break ;
     b74:	52 c0       	rjmp	.+164    	; 0xc1a <EXTI_void_MCUCR+0x19a>
	}
	break;

case 1 :

	switch (LevelType)
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <EXTI_void_MCUCR+0x14e>
     b7c:	03 97       	sbiw	r24, 0x03	; 3
     b7e:	d1 f1       	breq	.+116    	; 0xbf4 <EXTI_void_MCUCR+0x174>
		{
	    case 0 : CLEAR_BIT(MCUCR,2); CLEAR_BIT(MCUCR,3); break ;
		case 1 : SET_BIT(MCUCR,2);   CLEAR_BIT(MCUCR,3); break ;
		case 2 : CLEAR_BIT(MCUCR,2); SET_BIT(MCUCR,3);  break ;
		case 3 : SET_BIT(MCUCR,2);   SET_BIT(MCUCR,3);  break ;
		default : break ;
     b80:	4c c0       	rjmp	.+152    	; 0xc1a <EXTI_void_MCUCR+0x19a>

case 1 :

	switch (LevelType)
		{
	    case 0 : CLEAR_BIT(MCUCR,2); CLEAR_BIT(MCUCR,3); break ;
     b82:	85 e5       	ldi	r24, 0x55	; 85
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	25 e5       	ldi	r18, 0x55	; 85
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	f9 01       	movw	r30, r18
     b8c:	20 81       	ld	r18, Z
     b8e:	2b 7f       	andi	r18, 0xFB	; 251
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
     b94:	85 e5       	ldi	r24, 0x55	; 85
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	25 e5       	ldi	r18, 0x55	; 85
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	27 7f       	andi	r18, 0xF7	; 247
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	39 c0       	rjmp	.+114    	; 0xc1a <EXTI_void_MCUCR+0x19a>
		case 1 : SET_BIT(MCUCR,2);   CLEAR_BIT(MCUCR,3); break ;
     ba8:	85 e5       	ldi	r24, 0x55	; 85
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	25 e5       	ldi	r18, 0x55	; 85
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	f9 01       	movw	r30, r18
     bb2:	20 81       	ld	r18, Z
     bb4:	24 60       	ori	r18, 0x04	; 4
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
     bba:	85 e5       	ldi	r24, 0x55	; 85
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	25 e5       	ldi	r18, 0x55	; 85
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	f9 01       	movw	r30, r18
     bc4:	20 81       	ld	r18, Z
     bc6:	27 7f       	andi	r18, 0xF7	; 247
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
     bcc:	26 c0       	rjmp	.+76     	; 0xc1a <EXTI_void_MCUCR+0x19a>
		case 2 : CLEAR_BIT(MCUCR,2); SET_BIT(MCUCR,3);  break ;
     bce:	85 e5       	ldi	r24, 0x55	; 85
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	25 e5       	ldi	r18, 0x55	; 85
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	2b 7f       	andi	r18, 0xFB	; 251
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
     be0:	85 e5       	ldi	r24, 0x55	; 85
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	25 e5       	ldi	r18, 0x55	; 85
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	28 60       	ori	r18, 0x08	; 8
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <EXTI_void_MCUCR+0x19a>
		case 3 : SET_BIT(MCUCR,2);   SET_BIT(MCUCR,3);  break ;
     bf4:	85 e5       	ldi	r24, 0x55	; 85
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	25 e5       	ldi	r18, 0x55	; 85
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	f9 01       	movw	r30, r18
     bfe:	20 81       	ld	r18, Z
     c00:	24 60       	ori	r18, 0x04	; 4
     c02:	fc 01       	movw	r30, r24
     c04:	20 83       	st	Z, r18
     c06:	85 e5       	ldi	r24, 0x55	; 85
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	25 e5       	ldi	r18, 0x55	; 85
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	28 60       	ori	r18, 0x08	; 8
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
     c18:	00 00       	nop
		default : break ;
		break ;
		}
	break;
     c1a:	00 00       	nop

default : break ;

}
}
     c1c:	00 00       	nop
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <EXTI_void_GICR>:
//ENABLE INTERRUPT
void EXTI_void_GICR(u8 IntrruptType)
{
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	1f 92       	push	r1
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
	switch (IntrruptType)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	91 05       	cpc	r25, r1
     c3e:	81 f0       	breq	.+32     	; 0xc60 <EXTI_void_GICR+0x38>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	91 05       	cpc	r25, r1
     c44:	b9 f0       	breq	.+46     	; 0xc74 <EXTI_void_GICR+0x4c>
     c46:	89 2b       	or	r24, r25
     c48:	09 f0       	breq	.+2      	; 0xc4c <EXTI_void_GICR+0x24>
	{
	case 0 : SET_BIT(GICR,6); break ;
	case 1 : SET_BIT(GICR,7); break ;
	case 2 : SET_BIT(GICR,5); break ;
	default : break ;
     c4a:	1e c0       	rjmp	.+60     	; 0xc88 <EXTI_void_GICR+0x60>
//ENABLE INTERRUPT
void EXTI_void_GICR(u8 IntrruptType)
{
	switch (IntrruptType)
	{
	case 0 : SET_BIT(GICR,6); break ;
     c4c:	8b e5       	ldi	r24, 0x5B	; 91
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	2b e5       	ldi	r18, 0x5B	; 91
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	20 64       	ori	r18, 0x40	; 64
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <EXTI_void_GICR+0x60>
	case 1 : SET_BIT(GICR,7); break ;
     c60:	8b e5       	ldi	r24, 0x5B	; 91
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	2b e5       	ldi	r18, 0x5B	; 91
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	20 68       	ori	r18, 0x80	; 128
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <EXTI_void_GICR+0x60>
	case 2 : SET_BIT(GICR,5); break ;
     c74:	8b e5       	ldi	r24, 0x5B	; 91
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	2b e5       	ldi	r18, 0x5B	; 91
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f9 01       	movw	r30, r18
     c7e:	20 81       	ld	r18, Z
     c80:	20 62       	ori	r18, 0x20	; 32
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18
     c86:	00 00       	nop
	default : break ;

	}

}
     c88:	00 00       	nop
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <KeyPad_voidInit>:
#include "KeyPad_int.h"

u8 KPD_ROW[]= {R0,R1,R2,R3};
u8 KPD_COL[]= {C0,C1,C2,C3};
void KeyPad_voidInit(void )
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
// 1111 --> ROWS OUTPOT  0000 --> COLUMS INPUT   3LA PORT D
	DIO_voidSetPortDirection(KPD_PORT,0XF0);
     c9a:	60 ef       	ldi	r22, 0xF0	; 240
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 ac 03 	call	0x758	; 0x758 <DIO_voidSetPortDirection>
	// KOL EL PORT OUTPUT WE A5ER 4 BIT PULL UP FA BN7OT 3LEHA ONES INPUTS + ONES = PULL UP :D
	DIO_voidSetPortValue(KPD_PORT,0XFF);
     ca2:	6f ef       	ldi	r22, 0xFF	; 255
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>

}
     caa:	00 00       	nop
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <KeyPad_voidGetKey>:

void KeyPad_voidGetKey(u8 *u8key )
{
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <KeyPad_voidGetKey+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <KeyPad_voidGetKey+0x8>
     cba:	1f 92       	push	r1
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9d 83       	std	Y+5, r25	; 0x05
     cc2:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8RowsIndex  ;
u8 local_u8ColIndex  ;
u8 Local_u8pinval ;
for(local_u8ColIndex=0 ; local_u8ColIndex<NUMOFCOLUMS ;local_u8ColIndex++)
     cc4:	1a 82       	std	Y+2, r1	; 0x02
     cc6:	e1 c0       	rjmp	.+450    	; 0xe8a <KeyPad_voidGetKey+0x1d8>
{//عشان اتأكد انها pull up
	DIO_voidSetPortValue(KPD_PORT,0XFF);
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
	// 4 __5__6__7  دول الي هيكونو بزيرو ويقعدو يتكررو
	DIO_voidSetPinValue(KPD_PORT , KPD_COL[local_u8ColIndex],DIO_PIN_LOW);
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	8c 59       	subi	r24, 0x9C	; 156
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
     cda:	fc 01       	movw	r30, r24
     cdc:	80 81       	ld	r24, Z
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	68 2f       	mov	r22, r24
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_voidSetPinValue>

	 /*ROWS */
	for(local_u8RowsIndex=0 ; local_u8RowsIndex<NUMOFCOLUMS;local_u8RowsIndex++)
     ce8:	19 82       	std	Y+1, r1	; 0x01
     cea:	c8 c0       	rjmp	.+400    	; 0xe7c <KeyPad_voidGetKey+0x1ca>
	{
DIO_u8GetPinValue(KPD_PORT,KPD_ROW[local_u8ColIndex],&Local_u8pinval );
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	80 5a       	subi	r24, 0xA0	; 160
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	ce 01       	movw	r24, r28
     cfc:	03 96       	adiw	r24, 0x03	; 3
     cfe:	ac 01       	movw	r20, r24
     d00:	62 2f       	mov	r22, r18
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_u8GetPinValue>
//LAZEM Local_u8pinval LW ANTA DOST 3LEHA هو في الاول وحايد دلوقتي لو هو داس علي ROWS معينه بتبقي بزيرو
// ! KDA NOT ZERO = TRUE Y3NY AD5OL
if(!Local_u8pinval)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 23       	and	r24, r24
     d0c:	09 f0       	breq	.+2      	; 0xd10 <KeyPad_voidGetKey+0x5e>
     d0e:	b3 c0       	rjmp	.+358    	; 0xe76 <KeyPad_voidGetKey+0x1c4>
{
	//3AWEZ AT2KET ANY DAYES EL ZORAR MARA WA7DA
	while(!Local_u8pinval)
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <KeyPad_voidGetKey+0x7c>
	{//لازم بردو اشوف القيمه الحاليه لسه
		DIO_u8GetPinValue(KPD_PORT,KPD_ROW[local_u8ColIndex],&Local_u8pinval );
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	80 5a       	subi	r24, 0xA0	; 160
     d1a:	9f 4f       	sbci	r25, 0xFF	; 255
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 81       	ld	r18, Z
     d20:	ce 01       	movw	r24, r28
     d22:	03 96       	adiw	r24, 0x03	; 3
     d24:	ac 01       	movw	r20, r24
     d26:	62 2f       	mov	r22, r18
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_u8GetPinValue>
//LAZEM Local_u8pinval LW ANTA DOST 3LEHA هو في الاول وحايد دلوقتي لو هو داس علي ROWS معينه بتبقي بزيرو
// ! KDA NOT ZERO = TRUE Y3NY AD5OL
if(!Local_u8pinval)
{
	//3AWEZ AT2KET ANY DAYES EL ZORAR MARA WA7DA
	while(!Local_u8pinval)
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	88 23       	and	r24, r24
     d32:	79 f3       	breq	.-34     	; 0xd12 <KeyPad_voidGetKey+0x60>
	{//لازم بردو اشوف القيمه الحاليه لسه
		DIO_u8GetPinValue(KPD_PORT,KPD_ROW[local_u8ColIndex],&Local_u8pinval );
	}
	// كدا انا شلت ايدي من علي الزرار  مفروض يدخل يعملي الي انا عاوزو
	switch (local_u8ColIndex) //كدا معاه رقم الكولوم الي انا دايس عليه عاوز كدا اجيب الروز
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	91 05       	cpc	r25, r1
     d3e:	81 f1       	breq	.+96     	; 0xda0 <KeyPad_voidGetKey+0xee>
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	91 05       	cpc	r25, r1
     d44:	1c f4       	brge	.+6      	; 0xd4c <KeyPad_voidGetKey+0x9a>
     d46:	89 2b       	or	r24, r25
     d48:	49 f0       	breq	.+18     	; 0xd5c <KeyPad_voidGetKey+0xaa>
     d4a:	95 c0       	rjmp	.+298    	; 0xe76 <KeyPad_voidGetKey+0x1c4>
     d4c:	82 30       	cpi	r24, 0x02	; 2
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <KeyPad_voidGetKey+0xa2>
     d52:	48 c0       	rjmp	.+144    	; 0xde4 <KeyPad_voidGetKey+0x132>
     d54:	03 97       	sbiw	r24, 0x03	; 3
     d56:	09 f4       	brne	.+2      	; 0xd5a <KeyPad_voidGetKey+0xa8>
     d58:	66 c0       	rjmp	.+204    	; 0xe26 <KeyPad_voidGetKey+0x174>
     d5a:	8d c0       	rjmp	.+282    	; 0xe76 <KeyPad_voidGetKey+0x1c4>
	{
	case 0 :
	if(local_u8RowsIndex==0) *u8key ='1';
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 23       	and	r24, r24
     d60:	29 f4       	brne	.+10     	; 0xd6c <KeyPad_voidGetKey+0xba>
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	21 e3       	ldi	r18, 0x31	; 49
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
	if(local_u8RowsIndex==1) *u8key ='2';
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	29 f4       	brne	.+10     	; 0xd7c <KeyPad_voidGetKey+0xca>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	22 e3       	ldi	r18, 0x32	; 50
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
	if(local_u8RowsIndex==2) *u8key ='3';
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	29 f4       	brne	.+10     	; 0xd8c <KeyPad_voidGetKey+0xda>
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	23 e3       	ldi	r18, 0x33	; 51
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
	if(local_u8RowsIndex==3) *u8key ='+';
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	09 f0       	breq	.+2      	; 0xd94 <KeyPad_voidGetKey+0xe2>
     d92:	6a c0       	rjmp	.+212    	; 0xe68 <KeyPad_voidGetKey+0x1b6>
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	2b e2       	ldi	r18, 0x2B	; 43
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 83       	st	Z, r18
	break;
     d9e:	64 c0       	rjmp	.+200    	; 0xe68 <KeyPad_voidGetKey+0x1b6>
	case 1 :
		if(local_u8RowsIndex==0) *u8key ='4';
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 23       	and	r24, r24
     da4:	29 f4       	brne	.+10     	; 0xdb0 <KeyPad_voidGetKey+0xfe>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	24 e3       	ldi	r18, 0x34	; 52
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
		if(local_u8RowsIndex==1) *u8key ='5';
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	29 f4       	brne	.+10     	; 0xdc0 <KeyPad_voidGetKey+0x10e>
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	25 e3       	ldi	r18, 0x35	; 53
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
		if(local_u8RowsIndex==2) *u8key ='6';
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	29 f4       	brne	.+10     	; 0xdd0 <KeyPad_voidGetKey+0x11e>
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	26 e3       	ldi	r18, 0x36	; 54
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
		if(local_u8RowsIndex==3) *u8key ='-';
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <KeyPad_voidGetKey+0x126>
     dd6:	4a c0       	rjmp	.+148    	; 0xe6c <KeyPad_voidGetKey+0x1ba>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	2d e2       	ldi	r18, 0x2D	; 45
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
		break;
     de2:	44 c0       	rjmp	.+136    	; 0xe6c <KeyPad_voidGetKey+0x1ba>
	case 2 :
		if(local_u8RowsIndex==0) *u8key ='7';
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 23       	and	r24, r24
     de8:	29 f4       	brne	.+10     	; 0xdf4 <KeyPad_voidGetKey+0x142>
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	9d 81       	ldd	r25, Y+5	; 0x05
     dee:	27 e3       	ldi	r18, 0x37	; 55
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
		if(local_u8RowsIndex==1) *u8key ='8';
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	29 f4       	brne	.+10     	; 0xe04 <KeyPad_voidGetKey+0x152>
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	9d 81       	ldd	r25, Y+5	; 0x05
     dfe:	28 e3       	ldi	r18, 0x38	; 56
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
		if(local_u8RowsIndex==2) *u8key ='9';
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	29 f4       	brne	.+10     	; 0xe14 <KeyPad_voidGetKey+0x162>
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	29 e3       	ldi	r18, 0x39	; 57
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
		if(local_u8RowsIndex==3) *u8key ='*';
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	59 f5       	brne	.+86     	; 0xe70 <KeyPad_voidGetKey+0x1be>
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	2a e2       	ldi	r18, 0x2A	; 42
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
		break;
     e24:	25 c0       	rjmp	.+74     	; 0xe70 <KeyPad_voidGetKey+0x1be>
	case 3  :
		if(local_u8RowsIndex==0) *u8key ='=';
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	88 23       	and	r24, r24
     e2a:	29 f4       	brne	.+10     	; 0xe36 <KeyPad_voidGetKey+0x184>
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	2d e3       	ldi	r18, 0x3D	; 61
     e32:	fc 01       	movw	r30, r24
     e34:	20 83       	st	Z, r18
		if(local_u8RowsIndex==1) *u8key ='/';
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	29 f4       	brne	.+10     	; 0xe46 <KeyPad_voidGetKey+0x194>
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	2f e2       	ldi	r18, 0x2F	; 47
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
		if(local_u8RowsIndex==2) *u8key ='0';
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	29 f4       	brne	.+10     	; 0xe56 <KeyPad_voidGetKey+0x1a4>
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	20 e3       	ldi	r18, 0x30	; 48
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
		if(local_u8RowsIndex==3) *u8key ='0';
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	61 f4       	brne	.+24     	; 0xe74 <KeyPad_voidGetKey+0x1c2>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	20 e3       	ldi	r18, 0x30	; 48
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
		break;
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <KeyPad_voidGetKey+0x1c2>
	case 0 :
	if(local_u8RowsIndex==0) *u8key ='1';
	if(local_u8RowsIndex==1) *u8key ='2';
	if(local_u8RowsIndex==2) *u8key ='3';
	if(local_u8RowsIndex==3) *u8key ='+';
	break;
     e68:	00 00       	nop
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <KeyPad_voidGetKey+0x1c4>
	case 1 :
		if(local_u8RowsIndex==0) *u8key ='4';
		if(local_u8RowsIndex==1) *u8key ='5';
		if(local_u8RowsIndex==2) *u8key ='6';
		if(local_u8RowsIndex==3) *u8key ='-';
		break;
     e6c:	00 00       	nop
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <KeyPad_voidGetKey+0x1c4>
	case 2 :
		if(local_u8RowsIndex==0) *u8key ='7';
		if(local_u8RowsIndex==1) *u8key ='8';
		if(local_u8RowsIndex==2) *u8key ='9';
		if(local_u8RowsIndex==3) *u8key ='*';
		break;
     e70:	00 00       	nop
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <KeyPad_voidGetKey+0x1c4>
	case 3  :
		if(local_u8RowsIndex==0) *u8key ='=';
		if(local_u8RowsIndex==1) *u8key ='/';
		if(local_u8RowsIndex==2) *u8key ='0';
		if(local_u8RowsIndex==3) *u8key ='0';
		break;
     e74:	00 00       	nop
	DIO_voidSetPortValue(KPD_PORT,0XFF);
	// 4 __5__6__7  دول الي هيكونو بزيرو ويقعدو يتكررو
	DIO_voidSetPinValue(KPD_PORT , KPD_COL[local_u8ColIndex],DIO_PIN_LOW);

	 /*ROWS */
	for(local_u8RowsIndex=0 ; local_u8RowsIndex<NUMOFCOLUMS;local_u8RowsIndex++)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	84 30       	cpi	r24, 0x04	; 4
     e80:	08 f4       	brcc	.+2      	; 0xe84 <KeyPad_voidGetKey+0x1d2>
     e82:	34 cf       	rjmp	.-408    	; 0xcec <KeyPad_voidGetKey+0x3a>
void KeyPad_voidGetKey(u8 *u8key )
{
u8 local_u8RowsIndex  ;
u8 local_u8ColIndex  ;
u8 Local_u8pinval ;
for(local_u8ColIndex=0 ; local_u8ColIndex<NUMOFCOLUMS ;local_u8ColIndex++)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <KeyPad_voidGetKey+0x1e0>
     e90:	1b cf       	rjmp	.-458    	; 0xcc8 <KeyPad_voidGetKey+0x16>
	}


}

}
     e92:	00 00       	nop
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <Enablepulse>:
#include <util/delay.h>



void Enablepulse ()
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	2e 97       	sbiw	r28, 0x0e	; 14
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue (LCD_COMMAND_PORT,DIO_PIN_2, DIO_PIN_HIGH);
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue (LCD_COMMAND_PORT,DIO_PIN_2, DIO_PIN_LOW);
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	62 e0       	ldi	r22, 0x02	; 2
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_voidSetPinValue>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a8 e4       	ldi	r26, 0x48	; 72
     ed2:	b2 e4       	ldi	r27, 0x42	; 66
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	ab 83       	std	Y+3, r26	; 0x03
     eda:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a ef       	ldi	r20, 0xFA	; 250
     ee2:	54 e4       	ldi	r21, 0x44	; 68
     ee4:	69 81       	ldd	r22, Y+1	; 0x01
     ee6:	7a 81       	ldd	r23, Y+2	; 0x02
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8d 83       	std	Y+5, r24	; 0x05
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	af 83       	std	Y+7, r26	; 0x07
     efa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e8       	ldi	r20, 0x80	; 128
     f02:	5f e3       	ldi	r21, 0x3F	; 63
     f04:	6d 81       	ldd	r22, Y+5	; 0x05
     f06:	7e 81       	ldd	r23, Y+6	; 0x06
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	98 85       	ldd	r25, Y+8	; 0x08
     f0c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__cmpsf2>
     f10:	88 23       	and	r24, r24
     f12:	2c f4       	brge	.+10     	; 0xf1e <Enablepulse+0x7a>
		__ticks = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9a 87       	std	Y+10, r25	; 0x0a
     f1a:	89 87       	std	Y+9, r24	; 0x09
     f1c:	3f c0       	rjmp	.+126    	; 0xf9c <Enablepulse+0xf8>
	else if (__tmp > 65535)
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	57 e4       	ldi	r21, 0x47	; 71
     f26:	6d 81       	ldd	r22, Y+5	; 0x05
     f28:	7e 81       	ldd	r23, Y+6	; 0x06
     f2a:	8f 81       	ldd	r24, Y+7	; 0x07
     f2c:	98 85       	ldd	r25, Y+8	; 0x08
     f2e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__gesf2>
     f32:	18 16       	cp	r1, r24
     f34:	4c f5       	brge	.+82     	; 0xf88 <Enablepulse+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e2       	ldi	r20, 0x20	; 32
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9a 87       	std	Y+10, r25	; 0x0a
     f5c:	89 87       	std	Y+9, r24	; 0x09
     f5e:	0f c0       	rjmp	.+30     	; 0xf7e <Enablepulse+0xda>
     f60:	88 ec       	ldi	r24, 0xC8	; 200
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9c 87       	std	Y+12, r25	; 0x0c
     f66:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f68:	8b 85       	ldd	r24, Y+11	; 0x0b
     f6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <Enablepulse+0xc8>
     f70:	9c 87       	std	Y+12, r25	; 0x0c
     f72:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f74:	89 85       	ldd	r24, Y+9	; 0x09
     f76:	9a 85       	ldd	r25, Y+10	; 0x0a
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	9a 87       	std	Y+10, r25	; 0x0a
     f7c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	89 2b       	or	r24, r25
     f84:	69 f7       	brne	.-38     	; 0xf60 <Enablepulse+0xbc>

	_delay_ms(50);

}
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <Enablepulse+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f88:	6d 81       	ldd	r22, Y+5	; 0x05
     f8a:	7e 81       	ldd	r23, Y+6	; 0x06
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9a 87       	std	Y+10, r25	; 0x0a
     f9a:	89 87       	std	Y+9, r24	; 0x09
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	9e 87       	std	Y+14, r25	; 0x0e
     fa2:	8d 87       	std	Y+13, r24	; 0x0d
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <Enablepulse+0x104>
     fac:	9e 87       	std	Y+14, r25	; 0x0e
     fae:	8d 87       	std	Y+13, r24	; 0x0d
     fb0:	00 00       	nop
     fb2:	2e 96       	adiw	r28, 0x0e	; 14
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <intialize_LCD>:
void intialize_LCD()
{
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection (LCD_DATA_PORT , DIO_PORT_OUTPUT);
     fcc:	6f ef       	ldi	r22, 0xFF	; 255
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	0e 94 ac 03 	call	0x758	; 0x758 <DIO_voidSetPortDirection>
	DIO_voidSetPortDirection (LCD_COMMAND_PORT , DIO_PORT_OUTPUT);
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 ac 03 	call	0x758	; 0x758 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue (LCD_COMMAND_PORT , 0x00);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>

		WriteCommand (display_8_bit_2_lines_mode );
     fe4:	88 e3       	ldi	r24, 0x38	; 56
     fe6:	0e 94 02 08 	call	0x1004	; 0x1004 <WriteCommand>
		WriteCommand (Clear_display_screen );
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	0e 94 02 08 	call	0x1004	; 0x1004 <WriteCommand>
		WriteCommand (Display_on_cursor_off );
     ff0:	8c e0       	ldi	r24, 0x0C	; 12
     ff2:	0e 94 02 08 	call	0x1004	; 0x1004 <WriteCommand>
		WriteCommand (Force_cursor_to_beginning_1st_line );
     ff6:	80 e8       	ldi	r24, 0x80	; 128
     ff8:	0e 94 02 08 	call	0x1004	; 0x1004 <WriteCommand>

}
     ffc:	00 00       	nop
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <WriteCommand>:

void WriteCommand (u8 command )
{//Rs =0 for command port
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	1f 92       	push	r1
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue (LCD_COMMAND_PORT,DIO_PIN_0, DIO_PIN_LOW);
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_voidSetPinValue>
	DIO_voidSetPortValue (LCD_DATA_PORT , command);
    101a:	69 81       	ldd	r22, Y+1	; 0x01
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
	Enablepulse ();
    1022:	0e 94 52 07 	call	0xea4	; 0xea4 <Enablepulse>
}
    1026:	00 00       	nop
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <WriteData>:

void WriteData (u8 Data )
{//Rs =0 for command port
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1f 92       	push	r1
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue (LCD_COMMAND_PORT,DIO_PIN_0, DIO_PIN_HIGH);
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_voidSetPinValue>
	DIO_voidSetPortValue (LCD_DATA_PORT , Data);
    1046:	69 81       	ldd	r22, Y+1	; 0x01
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <DIO_voidSetPortValue>
	Enablepulse ();
    104e:	0e 94 52 07 	call	0xea4	; 0xea4 <Enablepulse>
}
    1052:	00 00       	nop
    1054:	0f 90       	pop	r0
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <LCD_u8WriteString>:
void LCD_u8WriteString (u8 *Copy_u8Data)
{
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 d0       	rcall	.+0      	; 0x1062 <LCD_u8WriteString+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
		while (*Copy_u8Data != '\0')
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <LCD_u8WriteString+0x26>
		{
			WriteData(*Copy_u8Data++);
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	9c 01       	movw	r18, r24
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	3a 83       	std	Y+2, r19	; 0x02
    1078:	29 83       	std	Y+1, r18	; 0x01
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	0e 94 18 08 	call	0x1030	; 0x1030 <WriteData>
	DIO_voidSetPortValue (LCD_DATA_PORT , Data);
	Enablepulse ();
}
void LCD_u8WriteString (u8 *Copy_u8Data)
{
		while (*Copy_u8Data != '\0')
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	fc 01       	movw	r30, r24
    1088:	80 81       	ld	r24, Z
    108a:	88 23       	and	r24, r24
    108c:	79 f7       	brne	.-34     	; 0x106c <LCD_u8WriteString+0x10>
		{
			WriteData(*Copy_u8Data++);
		}
}
    108e:	00 00       	nop
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <lcd_voidGoToX_Y>:
void lcd_voidGoToX_Y(u8 row , u8 col )
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <lcd_voidGoToX_Y+0x6>
    10a0:	1f 92       	push	r1
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	Local_u8Address = col+(row*LCD_u8_2ND_ROW);
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	98 2f       	mov	r25, r24
    10ae:	92 95       	swap	r25
    10b0:	99 0f       	add	r25, r25
    10b2:	99 0f       	add	r25, r25
    10b4:	90 7c       	andi	r25, 0xC0	; 192
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	89 0f       	add	r24, r25
    10ba:	89 83       	std	Y+1, r24	; 0x01
    Local_u8Address |= LCD_u8_SET_DDRAM_ADDRESS;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	89 83       	std	Y+1, r24	; 0x01
    WriteCommand(Local_u8Address);
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	0e 94 02 08 	call	0x1004	; 0x1004 <WriteCommand>

}
    10c8:	00 00       	nop
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <UART_voidInit>:
#define BAUD 19200                                   // define baud
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)            // set baud rate value for UBRR

// function to initialize UART
void UART_voidInit (void)
{
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    UBRRH = (BAUDRATE>>8);                      // shift the register right by 8 bits
    10de:	80 e4       	ldi	r24, 0x40	; 64
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	fc 01       	movw	r30, r24
    10e4:	10 82       	st	Z, r1
    UBRRL = BAUDRATE;     // set baud rate
    10e6:	89 e2       	ldi	r24, 0x29	; 41
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	29 e1       	ldi	r18, 0x19	; 25
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
Writing this bit to one enables the USART Transmitter. The Transmitter will override nor-
mal port operation for the TxD pin when enabled. The disabling of the Transmitter
(writing TXEN to zero) will not become effective until ongoing and pending transmis-
sions are completed, i.e., when the transmit Shift Register and transmit Buffer Register*/

    UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
    10f0:	8a e2       	ldi	r24, 0x2A	; 42
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	2a e2       	ldi	r18, 0x2A	; 42
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	20 81       	ld	r18, Z
    10fc:	28 61       	ori	r18, 0x18	; 24
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18


    //UCSZ1 UCSZ0 on UCSRC
    UCSRC|= (1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
    1102:	80 e4       	ldi	r24, 0x40	; 64
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	20 e4       	ldi	r18, 0x40	; 64
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	26 60       	ori	r18, 0x06	; 6
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
}
    1114:	00 00       	nop
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <sendChar>:


static void sendChar(unsigned char myChar)
{//The UDRE Flag indicates if the transmit buffer (UDR) is ready to receive new data
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	1f 92       	push	r1
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<UDRE)));
    1128:	00 00       	nop
    112a:	8b e2       	ldi	r24, 0x2B	; 43
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	fc 01       	movw	r30, r24
    1130:	80 81       	ld	r24, Z
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	80 72       	andi	r24, 0x20	; 32
    1138:	99 27       	eor	r25, r25
    113a:	89 2b       	or	r24, r25
    113c:	b1 f3       	breq	.-20     	; 0x112a <sendChar+0xe>
	UDR=myChar;
    113e:	8c e2       	ldi	r24, 0x2C	; 44
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	29 81       	ldd	r18, Y+1	; 0x01
    1144:	fc 01       	movw	r30, r24
    1146:	20 83       	st	Z, r18
}
    1148:	00 00       	nop
    114a:	0f 90       	pop	r0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <UART_voidSendString>:

void UART_voidSendString(char*str)
{
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	00 d0       	rcall	.+0      	; 0x1158 <UART_voidSendString+0x6>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
	static int i=0;
	while(str[i] !='\0')
    1160:	16 c0       	rjmp	.+44     	; 0x118e <UART_voidSendString+0x3c>
	{
		sendChar(str[i]);
    1162:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <i.1738>
    1166:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <i.1738+0x1>
    116a:	9c 01       	movw	r18, r24
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	fc 01       	movw	r30, r24
    1176:	80 81       	ld	r24, Z
    1178:	0e 94 8e 08 	call	0x111c	; 0x111c <sendChar>
		i++;
    117c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <i.1738>
    1180:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <i.1738+0x1>
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <i.1738+0x1>
    118a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <i.1738>
}

void UART_voidSendString(char*str)
{
	static int i=0;
	while(str[i] !='\0')
    118e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <i.1738>
    1192:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <i.1738+0x1>
    1196:	9c 01       	movw	r18, r24
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 81       	ld	r24, Z
    11a4:	88 23       	and	r24, r24
    11a6:	e9 f6       	brne	.-70     	; 0x1162 <UART_voidSendString+0x10>
	{
		sendChar(str[i]);
		i++;
	}
	i=0;
    11a8:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <i.1738+0x1>
    11ac:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <i.1738>
	//while(*str>0)
	//{
	//	sendChar(*str++);
	//}
}
    11b0:	00 00       	nop
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <UART_voidReceiveChar>:



// function to receive data
unsigned char UART_voidReceiveChar (void)
{
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    while(!((UCSRA) & (1<<RXC)));                   // wait while data is being received
    11c4:	00 00       	nop
    11c6:	8b e2       	ldi	r24, 0x2B	; 43
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	fc 01       	movw	r30, r24
    11cc:	80 81       	ld	r24, Z
    11ce:	88 23       	and	r24, r24
    11d0:	d4 f7       	brge	.-12     	; 0x11c6 <UART_voidReceiveChar+0xa>
    return UDR;                                   // return 8-bit data
    11d2:	8c e2       	ldi	r24, 0x2C	; 44
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	80 81       	ld	r24, Z
}
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <main>:

int main(void)
{
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2e 97       	sbiw	r28, 0x0e	; 14
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
	UART_voidInit();
    11f4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <UART_voidInit>
	DDRA=0xFF;
    11f8:	8a e3       	ldi	r24, 0x3A	; 58
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	2f ef       	ldi	r18, 0xFF	; 255
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
	while(1)
	{
		UART_voidSendString("ahmed mohamed / ahmed khaled / omer  / Ghith");
    1202:	82 e7       	ldi	r24, 0x72	; 114
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 a9 08 	call	0x1152	; 0x1152 <UART_voidSendString>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	aa e7       	ldi	r26, 0x7A	; 122
    1210:	b4 e4       	ldi	r27, 0x44	; 68
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	ab 83       	std	Y+3, r26	; 0x03
    1218:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a ef       	ldi	r20, 0xFA	; 250
    1220:	54 e4       	ldi	r21, 0x44	; 68
    1222:	69 81       	ldd	r22, Y+1	; 0x01
    1224:	7a 81       	ldd	r23, Y+2	; 0x02
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8d 83       	std	Y+5, r24	; 0x05
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	af 83       	std	Y+7, r26	; 0x07
    1238:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	6d 81       	ldd	r22, Y+5	; 0x05
    1244:	7e 81       	ldd	r23, Y+6	; 0x06
    1246:	8f 81       	ldd	r24, Y+7	; 0x07
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__cmpsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <main+0x7c>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9a 87       	std	Y+10, r25	; 0x0a
    1258:	89 87       	std	Y+9, r24	; 0x09
    125a:	3f c0       	rjmp	.+126    	; 0x12da <main+0xfa>
	else if (__tmp > 65535)
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	6d 81       	ldd	r22, Y+5	; 0x05
    1266:	7e 81       	ldd	r23, Y+6	; 0x06
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__gesf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	69 81       	ldd	r22, Y+1	; 0x01
    127e:	7a 81       	ldd	r23, Y+2	; 0x02
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9a 87       	std	Y+10, r25	; 0x0a
    129a:	89 87       	std	Y+9, r24	; 0x09
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <main+0xdc>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 87       	std	Y+12, r25	; 0x0c
    12a4:	8b 87       	std	Y+11, r24	; 0x0b
    12a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <main+0xca>
    12ae:	9c 87       	std	Y+12, r25	; 0x0c
    12b0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9a 87       	std	Y+10, r25	; 0x0a
    12ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	89 2b       	or	r24, r25
    12c2:	69 f7       	brne	.-38     	; 0x129e <main+0xbe>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6d 81       	ldd	r22, Y+5	; 0x05
    12c8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	98 85       	ldd	r25, Y+8	; 0x08
    12ce:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a 87       	std	Y+10, r25	; 0x0a
    12d8:	89 87       	std	Y+9, r24	; 0x09
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	9e 87       	std	Y+14, r25	; 0x0e
    12e0:	8d 87       	std	Y+13, r24	; 0x0d
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <main+0x106>
    12ea:	9e 87       	std	Y+14, r25	; 0x0e
    12ec:	8d 87       	std	Y+13, r24	; 0x0d

		_delay_ms(1000);

	}
    12ee:	89 cf       	rjmp	.-238    	; 0x1202 <main+0x22>

000012f0 <Init_voidTimer0>:
#include "EXTI.h"
#include "timer0.h"

void Init_voidTimer0 ()

{
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62

	SET_BIT (TCCR0,FOC0);
    12f8:	83 e5       	ldi	r24, 0x53	; 83
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	23 e5       	ldi	r18, 0x53	; 83
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	20 81       	ld	r18, Z
    1304:	20 68       	ori	r18, 0x80	; 128
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
	//at normal mode
	CLEAR_BIT (TCCR0,WGM00); CLEAR_BIT (TCCR0,WGM01);
    130a:	83 e5       	ldi	r24, 0x53	; 83
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	23 e5       	ldi	r18, 0x53	; 83
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	2f 7b       	andi	r18, 0xBF	; 191
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
    131c:	83 e5       	ldi	r24, 0x53	; 83
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	23 e5       	ldi	r18, 0x53	; 83
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	27 7f       	andi	r18, 0xF7	; 247
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
	// this 3 bits determine the clock cycle with prescale or not // 8 prescale
	CLEAR_BIT (TCCR0,CS00);   SET_BIT (TCCR0,CS01);   CLEAR_BIT (TCCR0,CS02);  //010
    132e:	83 e5       	ldi	r24, 0x53	; 83
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	23 e5       	ldi	r18, 0x53	; 83
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	20 81       	ld	r18, Z
    133a:	2e 7f       	andi	r18, 0xFE	; 254
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
    1340:	83 e5       	ldi	r24, 0x53	; 83
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	23 e5       	ldi	r18, 0x53	; 83
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	f9 01       	movw	r30, r18
    134a:	20 81       	ld	r18, Z
    134c:	22 60       	ori	r18, 0x02	; 2
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
    1352:	83 e5       	ldi	r24, 0x53	; 83
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	23 e5       	ldi	r18, 0x53	; 83
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	f9 01       	movw	r30, r18
    135c:	20 81       	ld	r18, Z
    135e:	2b 7f       	andi	r18, 0xFB	; 251
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
	//00 NORMAL MODE OC0 IS OFF
	CLEAR_BIT (TCCR0,COM00); CLEAR_BIT (TCCR0,COM01);
    1364:	83 e5       	ldi	r24, 0x53	; 83
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	23 e5       	ldi	r18, 0x53	; 83
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	2f 7e       	andi	r18, 0xEF	; 239
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
    1376:	83 e5       	ldi	r24, 0x53	; 83
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	23 e5       	ldi	r18, 0x53	; 83
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	f9 01       	movw	r30, r18
    1380:	20 81       	ld	r18, Z
    1382:	2f 7d       	andi	r18, 0xDF	; 223
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
	Enable_voidOverFlowInterrupt();
    1388:	0e 94 da 09 	call	0x13b4	; 0x13b4 <Enable_voidOverFlowInterrupt>

}
    138c:	00 00       	nop
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <Preload_voidsetPreloadvalue>:

void Preload_voidsetPreloadvalue (u8 u8preload)
{
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	1f 92       	push	r1
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8preload ;
    13a0:	82 e5       	ldi	r24, 0x52	; 82
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	29 81       	ldd	r18, Y+1	; 0x01
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18

}
    13aa:	00 00       	nop
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <Enable_voidOverFlowInterrupt>:

void Enable_voidOverFlowInterrupt()
{
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (TIMSK,TOIE0);
    13bc:	89 e5       	ldi	r24, 0x59	; 89
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	29 e5       	ldi	r18, 0x59	; 89
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	21 60       	ori	r18, 0x01	; 1
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
}
    13ce:	00 00       	nop
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <__tablejump2__>:
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	05 90       	lpm	r0, Z+
    13dc:	f4 91       	lpm	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	09 94       	ijmp

000013e2 <__cmpsf2>:
    13e2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_cmp>
    13e6:	08 f4       	brcc	.+2      	; 0x13ea <__cmpsf2+0x8>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	08 95       	ret

000013ec <__divsf3>:
    13ec:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3x>
    13f0:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_round>
    13f4:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
    13f8:	58 f0       	brcs	.+22     	; 0x1410 <__divsf3+0x24>
    13fa:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
    13fe:	40 f0       	brcs	.+16     	; 0x1410 <__divsf3+0x24>
    1400:	29 f4       	brne	.+10     	; 0x140c <__divsf3+0x20>
    1402:	5f 3f       	cpi	r21, 0xFF	; 255
    1404:	29 f0       	breq	.+10     	; 0x1410 <__divsf3+0x24>
    1406:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    140a:	51 11       	cpse	r21, r1
    140c:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    1410:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>

00001414 <__divsf3x>:
    1414:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_split3>
    1418:	68 f3       	brcs	.-38     	; 0x13f4 <__divsf3+0x8>

0000141a <__divsf3_pse>:
    141a:	99 23       	and	r25, r25
    141c:	b1 f3       	breq	.-20     	; 0x140a <__divsf3+0x1e>
    141e:	55 23       	and	r21, r21
    1420:	91 f3       	breq	.-28     	; 0x1406 <__divsf3+0x1a>
    1422:	95 1b       	sub	r25, r21
    1424:	55 0b       	sbc	r21, r21
    1426:	bb 27       	eor	r27, r27
    1428:	aa 27       	eor	r26, r26
    142a:	62 17       	cp	r22, r18
    142c:	73 07       	cpc	r23, r19
    142e:	84 07       	cpc	r24, r20
    1430:	38 f0       	brcs	.+14     	; 0x1440 <__divsf3_pse+0x26>
    1432:	9f 5f       	subi	r25, 0xFF	; 255
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	22 0f       	add	r18, r18
    1438:	33 1f       	adc	r19, r19
    143a:	44 1f       	adc	r20, r20
    143c:	aa 1f       	adc	r26, r26
    143e:	a9 f3       	breq	.-22     	; 0x142a <__divsf3_pse+0x10>
    1440:	35 d0       	rcall	.+106    	; 0x14ac <__divsf3_pse+0x92>
    1442:	0e 2e       	mov	r0, r30
    1444:	3a f0       	brmi	.+14     	; 0x1454 <__divsf3_pse+0x3a>
    1446:	e0 e8       	ldi	r30, 0x80	; 128
    1448:	32 d0       	rcall	.+100    	; 0x14ae <__divsf3_pse+0x94>
    144a:	91 50       	subi	r25, 0x01	; 1
    144c:	50 40       	sbci	r21, 0x00	; 0
    144e:	e6 95       	lsr	r30
    1450:	00 1c       	adc	r0, r0
    1452:	ca f7       	brpl	.-14     	; 0x1446 <__divsf3_pse+0x2c>
    1454:	2b d0       	rcall	.+86     	; 0x14ac <__divsf3_pse+0x92>
    1456:	fe 2f       	mov	r31, r30
    1458:	29 d0       	rcall	.+82     	; 0x14ac <__divsf3_pse+0x92>
    145a:	66 0f       	add	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	bb 1f       	adc	r27, r27
    1462:	26 17       	cp	r18, r22
    1464:	37 07       	cpc	r19, r23
    1466:	48 07       	cpc	r20, r24
    1468:	ab 07       	cpc	r26, r27
    146a:	b0 e8       	ldi	r27, 0x80	; 128
    146c:	09 f0       	breq	.+2      	; 0x1470 <__divsf3_pse+0x56>
    146e:	bb 0b       	sbc	r27, r27
    1470:	80 2d       	mov	r24, r0
    1472:	bf 01       	movw	r22, r30
    1474:	ff 27       	eor	r31, r31
    1476:	93 58       	subi	r25, 0x83	; 131
    1478:	5f 4f       	sbci	r21, 0xFF	; 255
    147a:	3a f0       	brmi	.+14     	; 0x148a <__divsf3_pse+0x70>
    147c:	9e 3f       	cpi	r25, 0xFE	; 254
    147e:	51 05       	cpc	r21, r1
    1480:	78 f0       	brcs	.+30     	; 0x14a0 <__divsf3_pse+0x86>
    1482:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    1486:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    148a:	5f 3f       	cpi	r21, 0xFF	; 255
    148c:	e4 f3       	brlt	.-8      	; 0x1486 <__divsf3_pse+0x6c>
    148e:	98 3e       	cpi	r25, 0xE8	; 232
    1490:	d4 f3       	brlt	.-12     	; 0x1486 <__divsf3_pse+0x6c>
    1492:	86 95       	lsr	r24
    1494:	77 95       	ror	r23
    1496:	67 95       	ror	r22
    1498:	b7 95       	ror	r27
    149a:	f7 95       	ror	r31
    149c:	9f 5f       	subi	r25, 0xFF	; 255
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__divsf3_pse+0x78>
    14a0:	88 0f       	add	r24, r24
    14a2:	91 1d       	adc	r25, r1
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret
    14ac:	e1 e0       	ldi	r30, 0x01	; 1
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	bb 1f       	adc	r27, r27
    14b6:	62 17       	cp	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	84 07       	cpc	r24, r20
    14bc:	ba 07       	cpc	r27, r26
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__divsf3_pse+0xae>
    14c0:	62 1b       	sub	r22, r18
    14c2:	73 0b       	sbc	r23, r19
    14c4:	84 0b       	sbc	r24, r20
    14c6:	ba 0b       	sbc	r27, r26
    14c8:	ee 1f       	adc	r30, r30
    14ca:	88 f7       	brcc	.-30     	; 0x14ae <__divsf3_pse+0x94>
    14cc:	e0 95       	com	r30
    14ce:	08 95       	ret

000014d0 <__fixunssfsi>:
    14d0:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_splitA>
    14d4:	88 f0       	brcs	.+34     	; 0x14f8 <__fixunssfsi+0x28>
    14d6:	9f 57       	subi	r25, 0x7F	; 127
    14d8:	98 f0       	brcs	.+38     	; 0x1500 <__fixunssfsi+0x30>
    14da:	b9 2f       	mov	r27, r25
    14dc:	99 27       	eor	r25, r25
    14de:	b7 51       	subi	r27, 0x17	; 23
    14e0:	b0 f0       	brcs	.+44     	; 0x150e <__fixunssfsi+0x3e>
    14e2:	e1 f0       	breq	.+56     	; 0x151c <__fixunssfsi+0x4c>
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	1a f0       	brmi	.+6      	; 0x14f4 <__fixunssfsi+0x24>
    14ee:	ba 95       	dec	r27
    14f0:	c9 f7       	brne	.-14     	; 0x14e4 <__fixunssfsi+0x14>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <__fixunssfsi+0x4c>
    14f4:	b1 30       	cpi	r27, 0x01	; 1
    14f6:	91 f0       	breq	.+36     	; 0x151c <__fixunssfsi+0x4c>
    14f8:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_zero>
    14fc:	b1 e0       	ldi	r27, 0x01	; 1
    14fe:	08 95       	ret
    1500:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__fp_zero>
    1504:	67 2f       	mov	r22, r23
    1506:	78 2f       	mov	r23, r24
    1508:	88 27       	eor	r24, r24
    150a:	b8 5f       	subi	r27, 0xF8	; 248
    150c:	39 f0       	breq	.+14     	; 0x151c <__fixunssfsi+0x4c>
    150e:	b9 3f       	cpi	r27, 0xF9	; 249
    1510:	cc f3       	brlt	.-14     	; 0x1504 <__fixunssfsi+0x34>
    1512:	86 95       	lsr	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b3 95       	inc	r27
    151a:	d9 f7       	brne	.-10     	; 0x1512 <__fixunssfsi+0x42>
    151c:	3e f4       	brtc	.+14     	; 0x152c <__fixunssfsi+0x5c>
    151e:	90 95       	com	r25
    1520:	80 95       	com	r24
    1522:	70 95       	com	r23
    1524:	61 95       	neg	r22
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	08 95       	ret

0000152e <__floatunsisf>:
    152e:	e8 94       	clt
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <__floatsisf+0x12>

00001532 <__floatsisf>:
    1532:	97 fb       	bst	r25, 7
    1534:	3e f4       	brtc	.+14     	; 0x1544 <__floatsisf+0x12>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	99 23       	and	r25, r25
    1546:	a9 f0       	breq	.+42     	; 0x1572 <__floatsisf+0x40>
    1548:	f9 2f       	mov	r31, r25
    154a:	96 e9       	ldi	r25, 0x96	; 150
    154c:	bb 27       	eor	r27, r27
    154e:	93 95       	inc	r25
    1550:	f6 95       	lsr	r31
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f1 11       	cpse	r31, r1
    155c:	f8 cf       	rjmp	.-16     	; 0x154e <__floatsisf+0x1c>
    155e:	fa f4       	brpl	.+62     	; 0x159e <__floatsisf+0x6c>
    1560:	bb 0f       	add	r27, r27
    1562:	11 f4       	brne	.+4      	; 0x1568 <__floatsisf+0x36>
    1564:	60 ff       	sbrs	r22, 0
    1566:	1b c0       	rjmp	.+54     	; 0x159e <__floatsisf+0x6c>
    1568:	6f 5f       	subi	r22, 0xFF	; 255
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	16 c0       	rjmp	.+44     	; 0x159e <__floatsisf+0x6c>
    1572:	88 23       	and	r24, r24
    1574:	11 f0       	breq	.+4      	; 0x157a <__floatsisf+0x48>
    1576:	96 e9       	ldi	r25, 0x96	; 150
    1578:	11 c0       	rjmp	.+34     	; 0x159c <__floatsisf+0x6a>
    157a:	77 23       	and	r23, r23
    157c:	21 f0       	breq	.+8      	; 0x1586 <__floatsisf+0x54>
    157e:	9e e8       	ldi	r25, 0x8E	; 142
    1580:	87 2f       	mov	r24, r23
    1582:	76 2f       	mov	r23, r22
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <__floatsisf+0x5e>
    1586:	66 23       	and	r22, r22
    1588:	71 f0       	breq	.+28     	; 0x15a6 <__floatsisf+0x74>
    158a:	96 e8       	ldi	r25, 0x86	; 134
    158c:	86 2f       	mov	r24, r22
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	2a f0       	brmi	.+10     	; 0x159e <__floatsisf+0x6c>
    1594:	9a 95       	dec	r25
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	da f7       	brpl	.-10     	; 0x1594 <__floatsisf+0x62>
    159e:	88 0f       	add	r24, r24
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret

000015a8 <__fp_cmp>:
    15a8:	99 0f       	add	r25, r25
    15aa:	00 08       	sbc	r0, r0
    15ac:	55 0f       	add	r21, r21
    15ae:	aa 0b       	sbc	r26, r26
    15b0:	e0 e8       	ldi	r30, 0x80	; 128
    15b2:	fe ef       	ldi	r31, 0xFE	; 254
    15b4:	16 16       	cp	r1, r22
    15b6:	17 06       	cpc	r1, r23
    15b8:	e8 07       	cpc	r30, r24
    15ba:	f9 07       	cpc	r31, r25
    15bc:	c0 f0       	brcs	.+48     	; 0x15ee <__fp_cmp+0x46>
    15be:	12 16       	cp	r1, r18
    15c0:	13 06       	cpc	r1, r19
    15c2:	e4 07       	cpc	r30, r20
    15c4:	f5 07       	cpc	r31, r21
    15c6:	98 f0       	brcs	.+38     	; 0x15ee <__fp_cmp+0x46>
    15c8:	62 1b       	sub	r22, r18
    15ca:	73 0b       	sbc	r23, r19
    15cc:	84 0b       	sbc	r24, r20
    15ce:	95 0b       	sbc	r25, r21
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <__fp_cmp+0x38>
    15d2:	0a 26       	eor	r0, r26
    15d4:	61 f0       	breq	.+24     	; 0x15ee <__fp_cmp+0x46>
    15d6:	23 2b       	or	r18, r19
    15d8:	24 2b       	or	r18, r20
    15da:	25 2b       	or	r18, r21
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <__fp_cmp+0x3e>
    15de:	08 95       	ret
    15e0:	0a 26       	eor	r0, r26
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <__fp_cmp+0x3e>
    15e4:	a1 40       	sbci	r26, 0x01	; 1
    15e6:	a6 95       	lsr	r26
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	81 1d       	adc	r24, r1
    15ec:	81 1d       	adc	r24, r1
    15ee:	08 95       	ret

000015f0 <__fp_inf>:
    15f0:	97 f9       	bld	r25, 7
    15f2:	9f 67       	ori	r25, 0x7F	; 127
    15f4:	80 e8       	ldi	r24, 0x80	; 128
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	08 95       	ret

000015fc <__fp_nan>:
    15fc:	9f ef       	ldi	r25, 0xFF	; 255
    15fe:	80 ec       	ldi	r24, 0xC0	; 192
    1600:	08 95       	ret

00001602 <__fp_pscA>:
    1602:	00 24       	eor	r0, r0
    1604:	0a 94       	dec	r0
    1606:	16 16       	cp	r1, r22
    1608:	17 06       	cpc	r1, r23
    160a:	18 06       	cpc	r1, r24
    160c:	09 06       	cpc	r0, r25
    160e:	08 95       	ret

00001610 <__fp_pscB>:
    1610:	00 24       	eor	r0, r0
    1612:	0a 94       	dec	r0
    1614:	12 16       	cp	r1, r18
    1616:	13 06       	cpc	r1, r19
    1618:	14 06       	cpc	r1, r20
    161a:	05 06       	cpc	r0, r21
    161c:	08 95       	ret

0000161e <__fp_round>:
    161e:	09 2e       	mov	r0, r25
    1620:	03 94       	inc	r0
    1622:	00 0c       	add	r0, r0
    1624:	11 f4       	brne	.+4      	; 0x162a <__fp_round+0xc>
    1626:	88 23       	and	r24, r24
    1628:	52 f0       	brmi	.+20     	; 0x163e <__fp_round+0x20>
    162a:	bb 0f       	add	r27, r27
    162c:	40 f4       	brcc	.+16     	; 0x163e <__fp_round+0x20>
    162e:	bf 2b       	or	r27, r31
    1630:	11 f4       	brne	.+4      	; 0x1636 <__fp_round+0x18>
    1632:	60 ff       	sbrs	r22, 0
    1634:	04 c0       	rjmp	.+8      	; 0x163e <__fp_round+0x20>
    1636:	6f 5f       	subi	r22, 0xFF	; 255
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__fp_split3>:
    1640:	57 fd       	sbrc	r21, 7
    1642:	90 58       	subi	r25, 0x80	; 128
    1644:	44 0f       	add	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	59 f0       	breq	.+22     	; 0x1660 <__fp_splitA+0x10>
    164a:	5f 3f       	cpi	r21, 0xFF	; 255
    164c:	71 f0       	breq	.+28     	; 0x166a <__fp_splitA+0x1a>
    164e:	47 95       	ror	r20

00001650 <__fp_splitA>:
    1650:	88 0f       	add	r24, r24
    1652:	97 fb       	bst	r25, 7
    1654:	99 1f       	adc	r25, r25
    1656:	61 f0       	breq	.+24     	; 0x1670 <__fp_splitA+0x20>
    1658:	9f 3f       	cpi	r25, 0xFF	; 255
    165a:	79 f0       	breq	.+30     	; 0x167a <__fp_splitA+0x2a>
    165c:	87 95       	ror	r24
    165e:	08 95       	ret
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	14 06       	cpc	r1, r20
    1666:	55 1f       	adc	r21, r21
    1668:	f2 cf       	rjmp	.-28     	; 0x164e <__fp_split3+0xe>
    166a:	46 95       	lsr	r20
    166c:	f1 df       	rcall	.-30     	; 0x1650 <__fp_splitA>
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <__fp_splitA+0x30>
    1670:	16 16       	cp	r1, r22
    1672:	17 06       	cpc	r1, r23
    1674:	18 06       	cpc	r1, r24
    1676:	99 1f       	adc	r25, r25
    1678:	f1 cf       	rjmp	.-30     	; 0x165c <__fp_splitA+0xc>
    167a:	86 95       	lsr	r24
    167c:	71 05       	cpc	r23, r1
    167e:	61 05       	cpc	r22, r1
    1680:	08 94       	sec
    1682:	08 95       	ret

00001684 <__fp_zero>:
    1684:	e8 94       	clt

00001686 <__fp_szero>:
    1686:	bb 27       	eor	r27, r27
    1688:	66 27       	eor	r22, r22
    168a:	77 27       	eor	r23, r23
    168c:	cb 01       	movw	r24, r22
    168e:	97 f9       	bld	r25, 7
    1690:	08 95       	ret

00001692 <__gesf2>:
    1692:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_cmp>
    1696:	08 f4       	brcc	.+2      	; 0x169a <__gesf2+0x8>
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	08 95       	ret

0000169c <__mulsf3>:
    169c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__mulsf3x>
    16a0:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_round>
    16a4:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
    16a8:	38 f0       	brcs	.+14     	; 0x16b8 <__mulsf3+0x1c>
    16aa:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
    16ae:	20 f0       	brcs	.+8      	; 0x16b8 <__mulsf3+0x1c>
    16b0:	95 23       	and	r25, r21
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <__mulsf3+0x1c>
    16b4:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    16b8:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>
    16bc:	11 24       	eor	r1, r1
    16be:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>

000016c2 <__mulsf3x>:
    16c2:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_split3>
    16c6:	70 f3       	brcs	.-36     	; 0x16a4 <__mulsf3+0x8>

000016c8 <__mulsf3_pse>:
    16c8:	95 9f       	mul	r25, r21
    16ca:	c1 f3       	breq	.-16     	; 0x16bc <__mulsf3+0x20>
    16cc:	95 0f       	add	r25, r21
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	55 1f       	adc	r21, r21
    16d2:	62 9f       	mul	r22, r18
    16d4:	f0 01       	movw	r30, r0
    16d6:	72 9f       	mul	r23, r18
    16d8:	bb 27       	eor	r27, r27
    16da:	f0 0d       	add	r31, r0
    16dc:	b1 1d       	adc	r27, r1
    16de:	63 9f       	mul	r22, r19
    16e0:	aa 27       	eor	r26, r26
    16e2:	f0 0d       	add	r31, r0
    16e4:	b1 1d       	adc	r27, r1
    16e6:	aa 1f       	adc	r26, r26
    16e8:	64 9f       	mul	r22, r20
    16ea:	66 27       	eor	r22, r22
    16ec:	b0 0d       	add	r27, r0
    16ee:	a1 1d       	adc	r26, r1
    16f0:	66 1f       	adc	r22, r22
    16f2:	82 9f       	mul	r24, r18
    16f4:	22 27       	eor	r18, r18
    16f6:	b0 0d       	add	r27, r0
    16f8:	a1 1d       	adc	r26, r1
    16fa:	62 1f       	adc	r22, r18
    16fc:	73 9f       	mul	r23, r19
    16fe:	b0 0d       	add	r27, r0
    1700:	a1 1d       	adc	r26, r1
    1702:	62 1f       	adc	r22, r18
    1704:	83 9f       	mul	r24, r19
    1706:	a0 0d       	add	r26, r0
    1708:	61 1d       	adc	r22, r1
    170a:	22 1f       	adc	r18, r18
    170c:	74 9f       	mul	r23, r20
    170e:	33 27       	eor	r19, r19
    1710:	a0 0d       	add	r26, r0
    1712:	61 1d       	adc	r22, r1
    1714:	23 1f       	adc	r18, r19
    1716:	84 9f       	mul	r24, r20
    1718:	60 0d       	add	r22, r0
    171a:	21 1d       	adc	r18, r1
    171c:	82 2f       	mov	r24, r18
    171e:	76 2f       	mov	r23, r22
    1720:	6a 2f       	mov	r22, r26
    1722:	11 24       	eor	r1, r1
    1724:	9f 57       	subi	r25, 0x7F	; 127
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	9a f0       	brmi	.+38     	; 0x1750 <__mulsf3_pse+0x88>
    172a:	f1 f0       	breq	.+60     	; 0x1768 <__mulsf3_pse+0xa0>
    172c:	88 23       	and	r24, r24
    172e:	4a f0       	brmi	.+18     	; 0x1742 <__mulsf3_pse+0x7a>
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	bb 1f       	adc	r27, r27
    1736:	66 1f       	adc	r22, r22
    1738:	77 1f       	adc	r23, r23
    173a:	88 1f       	adc	r24, r24
    173c:	91 50       	subi	r25, 0x01	; 1
    173e:	50 40       	sbci	r21, 0x00	; 0
    1740:	a9 f7       	brne	.-22     	; 0x172c <__mulsf3_pse+0x64>
    1742:	9e 3f       	cpi	r25, 0xFE	; 254
    1744:	51 05       	cpc	r21, r1
    1746:	80 f0       	brcs	.+32     	; 0x1768 <__mulsf3_pse+0xa0>
    1748:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    174c:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    1750:	5f 3f       	cpi	r21, 0xFF	; 255
    1752:	e4 f3       	brlt	.-8      	; 0x174c <__mulsf3_pse+0x84>
    1754:	98 3e       	cpi	r25, 0xE8	; 232
    1756:	d4 f3       	brlt	.-12     	; 0x174c <__mulsf3_pse+0x84>
    1758:	86 95       	lsr	r24
    175a:	77 95       	ror	r23
    175c:	67 95       	ror	r22
    175e:	b7 95       	ror	r27
    1760:	f7 95       	ror	r31
    1762:	e7 95       	ror	r30
    1764:	9f 5f       	subi	r25, 0xFF	; 255
    1766:	c1 f7       	brne	.-16     	; 0x1758 <__mulsf3_pse+0x90>
    1768:	fe 2b       	or	r31, r30
    176a:	88 0f       	add	r24, r24
    176c:	91 1d       	adc	r25, r1
    176e:	96 95       	lsr	r25
    1770:	87 95       	ror	r24
    1772:	97 f9       	bld	r25, 7
    1774:	08 95       	ret

00001776 <_exit>:
    1776:	f8 94       	cli

00001778 <__stop_program>:
    1778:	ff cf       	rjmp	.-2      	; 0x1778 <__stop_program>
